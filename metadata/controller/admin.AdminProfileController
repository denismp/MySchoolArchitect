{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "admin.AdminProfileController",
        "stores": [
            "admin.AdminProfileStore",
            "admin.AdminStore",
            "admin.AdminPasswordStore",
            "security.SecurityStore"
        ]
    },
    "name": "guardian.OnlyGuardianProfileViewController1",
    "designerId": "e6e3140f-bea9-423c-a220-4526d53dd693",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "AdminProfileForm",
                "selector": "#adminprofileform"
            },
            "name": "AdminProfileForm",
            "designerId": "ab319980-5fff-4bcc-ac0c-96e1703df5ca"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "AdminGridPanel",
                "selector": "#admingridpanel"
            },
            "name": "AdminGridPanel",
            "designerId": "d980bdbc-759e-4a1d-a1a1-7beba1494188"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "form",
                    "selected"
                ],
                "fn": "loadForm",
                "implHandler": [
                    "debugger;",
                    "",
                    "console.log( form );",
                    "",
                    "form.loadRecord( selected[0] );",
                    "",
                    "var myFields = form.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "}",
                    "console.log('admin.AdminProfileController.loadForm(): completed');"
                ]
            },
            "name": "loadForm",
            "designerId": "f4db400e-17fd-474c-aaee-1ecfddcabd9e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMyJsonStoreLoad",
                "implHandler": [
                    "//debugger;",
                    "//var g_ = Ext.ComponentQuery.query(\"#monthlysummarygridpanel\")[0];",
                    "var g_ = this.getAdminGridPanel();",
                    "",
                    "if (g_.getStore().getCount() > 0) {",
                    "    g_.getSelectionModel().deselectAll();",
                    "    g_.getSelectionModel().select( 0 );",
                    "}",
                    "",
                    "this.gridViewReady = true;"
                ]
            },
            "name": "onMyJsonStoreLoad",
            "designerId": "36fd3bfa-aedf-4064-9db6-4dbd77eda8c3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveProfileForm",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Save Admin Profile Form\" );",
                    "//var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myForm = this.getAdminProfileForm();",
                    "",
                    "",
                    "//\tGet the stores that we will need",
                    "var myStore\t\t= this.getStore( 'admin.AdminProfileStore' );",
                    "",
                    "//var rForm = myForm.getForm();",
                    "",
                    "//var formValues1\t= myForm.getValues();",
                    "//var formValues\t= myForm.getForm().getValues();",
                    "var formFields\t= myForm.getForm().getFields();",
                    "//var name\t= formFields.items[0].name;",
                    "//var value\t= formFields.items[0].lastValue;",
                    "//var test\t= this.getFormValue( formFields, 'middleName');",
                    "//debugger;",
                    "",
                    "//\tCreate the form record.",
                    "var myRecord\t= myForm.getRecord();",
                    "",
                    "myRecord.set('firstName', this.getFormValue( formFields, 'firstName' ) );",
                    "myRecord.set('middleName', this.getFormValue( formFields, 'middleName' ));",
                    "myRecord.set('lastName', this.getFormValue( formFields, 'lastName' ));",
                    "myRecord.set('phone1', this.getFormValue( formFields, 'phone1' ));",
                    "myRecord.set('phone2', this.getFormValue( formFields, 'phone2' ));",
                    "myRecord.set('address1', this.getFormValue( formFields, 'address1' ));",
                    "myRecord.set('address2', this.getFormValue( formFields, 'address2' ));",
                    "myRecord.set('city', this.getFormValue( formFields, 'city' ));",
                    "myRecord.set('province', this.getFormValue( formFields, 'province' ));",
                    "myRecord.set('postalCode', this.getFormValue( formFields, 'postalCode' ));",
                    "myRecord.set('country', this.getFormValue( formFields, 'country' ));",
                    "myRecord.set('email', this.getFormValue( formFields, 'email' ));",
                    "myRecord.set('dob', this.getFormValue( formFields, 'dob' ));",
                    "",
                    "myRecord.set('whoUpdated', 'login');",
                    "myRecord.set('lastUpdated', new Date());",
                    "",
                    "debugger;",
                    "",
                    "//sync the store.",
                    "myStore.sync();"
                ]
            },
            "name": "saveProfileForm",
            "designerId": "c69721fb-c8e9-41f8-9db5-fd665a7fd333"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "formFields",
                    "name"
                ],
                "fn": "getFormValue",
                "implHandler": [
                    "//var name\t= formFields.items[0].name;",
                    "//var value\t= formFields.items[0].lastValue;",
                    "for( var i = 0; i < formFields.length; i++ )",
                    "{",
                    "    if( formFields.items[i].name === name )",
                    "    {",
                    "        return formFields.items[i].lastValue;",
                    "    }",
                    "}",
                    "return \"\";"
                ]
            },
            "name": "getFormValue",
            "designerId": "4bcf7c24-8e9d-4801-b6fb-ff00ed201b69"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#admingridpanel",
                "designer|targetType": "admin.ProfileGridAdminOnlyPanel",
                "fn": "onAdmingridpanelViewReady",
                "implHandler": [
                    "debugger;",
                    "console.log('onAdmingridpanelViewReady()');",
                    "var myStore = Ext.getStore('admin.AdminProfileStore');",
                    "",
                    "var securityStore = Ext.getStore('security.SecurityStore');",
                    "var securityRecord = securityStore.getAt(0);",
                    "this.userName = securityRecord.get('userName');",
                    "this.userRole = securityRecord.get('userRole');",
                    "var ss_ = Ext.getStore('student.StudentStore');",
                    "",
                    "//var studentName_;",
                    "",
                    "",
                    "var r_ = ss_.getAt(0);",
                    "var title;",
                    "var myGrid = this.getAdminGridPanel();",
                    "",
                    "",
                    "if( this.userRole === 'ROLE_FACULTY' || this.userRole === 'ROLE_SCHOOL'){",
                    "\ttitle = this.userName + '/' + this.userRole;",
                    "",
                    "",
                    "\tmyGrid.setTitle('[' + title + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this,",
                    "\t\tparams: {",
                    "\t\t\tstudentName: this.userName",
                    "\t\t}",
                    "\t});",
                    "}",
                    "else if( this.userRole === 'ROLE_ADMIN'){",
                    "\ttitle = this.userName + '/' + this.userRole;",
                    "",
                    "",
                    "\tmyGrid.setTitle('[' + title + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this",
                    "\t});",
                    "}",
                    "else{",
                    "\t//title = r_.get('firstName') + \" \" + r_.get('middleName') + ' ' + r_.get('lastName');",
                    "\ttitle = this.userName + '/' + this.userRole;",
                    "",
                    "\tmyGrid.setTitle('[' + title + ']' + ' School Admins');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this,",
                    "\t\tparams: {",
                    "\t\t\tstudentName: this.userName",
                    "\t\t}",
                    "\t});",
                    "}",
                    "this.gridViewReady = true;"
                ],
                "name": "viewready",
                "scope": "me"
            },
            "name": "onAdmingridpanelViewReady",
            "designerId": "f141dbcd-3837-473b-912c-b6cc66e65067"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#admingridpanel",
                "designer|targetType": "admin.ProfileGridAdminOnlyPanel",
                "fn": "onAdmingridpanelSelectionChange",
                "implHandler": [
                    "debugger;",
                    "// in the onMyJsonStoreLoad we do a deselect so we need to test",
                    "// if selected[0] has a value",
                    "if ( Ext.isDefined( selected  ) && Ext.isDefined( selected[0]  )) {",
                    "    var myForm = this.getAdminProfileForm();",
                    "",
                    "    this.loadForm( myForm, selected );",
                    "",
                    "",
                    "    console.log('onAdmingridpanelSelectionChange()');",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onAdmingridpanelSelectionChange",
            "designerId": "b8b6b0d4-9446-40ee-8da6-c91f7797c362"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#onlyadminnewtool",
                "designer|params": [
                    "tool, e, eOpts"
                ],
                "designer|targetType": "MyTool21",
                "fn": "onOnlyadminnewtoolClick",
                "implHandler": [
                    "debugger;",
                    "",
                    "//var guardianStore = Ext.getStore('admin.AdminProfileStore');",
                    "",
                    "",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar newDialog = Ext.create( 'MySchool.view.admin.NewDialog' );",
                    "",
                    "\twindow.console.log( 'New Admin Dialog' );",
                    "",
                    "\tnewDialog.render( Ext.getBody() );",
                    "\tnewDialog.show();",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOnlyadminnewtoolClick",
            "designerId": "18c982b0-bdb9-45a5-8466-91dd1f085070"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#onlyadminsavetool",
                "designer|params": [
                    "tool, e, eOpts"
                ],
                "designer|targetType": "MyTool22",
                "fn": "onOnlyadminsavetoolClick",
                "implHandler": [
                    "window.console.log( \"admin.AdminProfileStore.Save\" );",
                    "debugger;",
                    "",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar mystore = Ext.getStore(\"admin.AdminProfileStore\");",
                    "",
                    "\tvar records = mystore.getModifiedRecords();",
                    "\tfor( var i = 0; i < records.length; i++ )",
                    "\t{",
                    "\t\trecords[i].set( 'lastUpdated', new Date() );",
                    "\t\trecords[i].set( 'whoUpdated', 'login');",
                    "\t}",
                    "",
                    "\tmystore.sync();",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOnlyadminsavetoolClick",
            "designerId": "784123d3-3677-4c81-9659-982d6fcf9d35"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#onlyadminpasswordtool",
                "designer|params": [
                    "tool, e, eOpts"
                ],
                "designer|targetType": "MyTool25",
                "fn": "onOnlyadminpasswordtoolClick",
                "implHandler": [
                    "debugger;",
                    "//var studentStore\t\t\t\t= Ext.getStore('admin.AdminStore');",
                    "//var facultyStore\t\t\t\t= Ext.getStore('faculty.FacultyTableStore');",
                    "//var subjectStore\t\t\t\t= Ext.getStore('subject.SubjectStore');",
                    "//var commonQuarterSubjectStore\t= Ext.getStore( 'common.QuarterSubjectStore');",
                    "//var commonMonthStore\t\t\t= Ext.getStore('common.MonthStore');",
                    "",
                    "//var studentRecord\t= studentStore.getAt(0);",
                    "//var studentId\t\t= studentRecord.get( 'id' );",
                    "//var studentName\t\t= studentRecord.get( 'userName' );",
                    "",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar newDialog = Ext.create( 'MySchool.view.admin.PasswordDialog' );",
                    "",
                    "\t//newDialog.down('#studentid').setValue( studentId );",
                    "\t//newDialog.down('#studentname').setValue( studentName );",
                    "",
                    "\t//commonQuarterSubjectStore.myLoad();",
                    "\t//commonMonthStore.myLoad();",
                    "",
                    "\twindow.console.log( 'Password Dialog' );",
                    "",
                    "\tnewDialog.render( Ext.getBody() );",
                    "\tnewDialog.show();",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOnlyadminpasswordtoolClick",
            "designerId": "059da92c-1d3e-487d-a70c-854ec6ec6048"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminprofiletab",
                "designer|params": [
                    "component, eOpts"
                ],
                "designer|targetType": "MyPanel12",
                "fn": "onAdminprofiletabActivate",
                "implHandler": [
                    "debugger;",
                    "//subjectsgrid",
                    "// catch the tab activate but only reload if we have processed",
                    "// the viewready indicated by this.gridViewReady",
                    "console.log('tab.activate()');",
                    "",
                    "if ( Ext.isDefined( this.gridViewReady  ) ) {",
                    "    //var g_ = Ext.ComponentQuery.query(\"#subjectsgrid\")[0];",
                    "\tvar g_ = this.getAdminGridPanel();",
                    "",
                    "    g_.getStore().reload();",
                    "}",
                    ""
                ],
                "name": "activate",
                "scope": "me"
            },
            "name": "onAdminprofiletabActivate",
            "designerId": "bc6a7087-7810-4fb9-ae02-521f924a0611"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#onlyadminrefreshtool",
                "designer|params": [
                    "tool, e, eOpts"
                ],
                "designer|targetType": "MyTool19",
                "fn": "onOnlyadminrefreshtoolClick",
                "implHandler": [
                    "debugger;",
                    "var myStore = Ext.getStore('admin.AdminProfileStore');",
                    "myStore.reload();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onOnlyadminrefreshtoolClick",
            "designerId": "f0185413-84c2-421f-ac83-1cd2cdf8855b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#admincancel",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton46",
                "fn": "onAdmincancelClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel New School Admin\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdmincancelClick",
            "designerId": "baf36ae3-f69d-40ee-bd19-87f88bc4d012"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminsubmit",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton47",
                "fn": "onAdminsubmitClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit New School Admin\" );",
                    "var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myPanel\t\t\t\t\t= button.up();",
                    "var myGrid\t\t\t\t\t= this.getAdminGridPanel();",
                    "",
                    "//Get the values from the form and insert a new record into the AdminProfileStore.",
                    "",
                    "var formValues\t\t\t\t= myForm.getValues();",
                    "",
                    "//\tCreate an empty record",
                    "var myRecord\t= Ext.create('MySchool.model.admin.PasswordModel');",
                    "",
                    "//\tGet the stores that we will need",
                    "",
                    "var firstname\t= formValues.firstname;",
                    "var middlename\t= formValues.middlename;",
                    "var lastname\t= formValues.lastname;",
                    "var phone1\t\t= formValues.phone1;",
                    "var phone2\t\t= formValues.phone2;",
                    "var address1\t= formValues.address1;",
                    "var address2\t= formValues.address2;",
                    "var city\t\t= formValues.city;",
                    "var state\t\t= formValues.state;",
                    "var postalcode\t= formValues.postalcode;",
                    "var country\t\t= formValues.country;",
                    "var email\t\t= formValues.email;",
                    "var username\t= formValues.username;",
                    "var password\t= formValues.password;",
                    "",
                    "var type\t\t= formValues.combotype;",
                    "",
                    "var dob\t\t\t= formValues.dob;",
                    "",
                    "",
                    "var myStore\t\t= this.getStore( 'admin.AdminPasswordStore' );",
                    "",
                    "//debugger;",
                    "",
                    "",
                    "myRecord.set( 'id', null );",
                    "//myRecord.set( 'version', null );",
                    "",
                    "myRecord.set('whoUpdated', 'login');",
                    "myRecord.set('lastUpdated', new Date());",
                    "myRecord.set('email', email );",
                    "myRecord.set('firstName', firstname );",
                    "myRecord.set('middleName', middlename );",
                    "myRecord.set('lastName', lastname);",
                    "myRecord.set('phone1', phone1 );",
                    "myRecord.set('phone2', phone2 );",
                    "myRecord.set('address1', address1);",
                    "myRecord.set('address2', address2);",
                    "myRecord.set('city', city);",
                    "myRecord.set('province', state);",
                    "myRecord.set('postalCode',postalcode);",
                    "myRecord.set('country',country);",
                    "myRecord.set('userName',username);",
                    "myRecord.set('userPassword', password );",
                    "",
                    "myRecord.set('enabled', true);",
                    "myRecord.set('dob', dob);",
                    "",
                    "myRecord.set('type', type);",
                    "",
                    "//add to the store",
                    "",
                    "myStore.add( myRecord );",
                    "",
                    "//sync the store.",
                    "myStore.sync();",
                    "",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();",
                    "",
                    "myStore.load({",
                    "\tcallback: this.reloadGrid,",
                    "\tscope: this",
                    "});",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdminsubmitClick",
            "designerId": "246eaff9-5216-47cf-9235-4f504f227117"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminprofileformeditbutton",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton16",
                "fn": "onAdminprofileformeditbuttonClick",
                "implHandler": [
                    "debugger;",
                    "",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar myForm = this.getAdminProfileForm();",
                    "\tvar myFields = myForm.getForm().getFields();",
                    "\tfor( var i = 0; i < myFields.length; i++ )",
                    "\t{",
                    "\t\tmyFields.items[i].enable();",
                    "\t}",
                    "\t//myForm.getForm().focus();studentprofileformeditbutton",
                    "\tvar cancelButton\t= button.up().down('#adminprofileformcanelbutton');",
                    "\tvar saveButton\t\t= button.up().down('#adminprofileformsavebutton');",
                    "\tcancelButton.enable();",
                    "\tsaveButton.enable();",
                    "\tbutton.disable();",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdminprofileformeditbuttonClick",
            "designerId": "eeb1896d-deeb-4dde-a011-a2eff727f692"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminprofileformcanelbutton",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton17",
                "fn": "onAdminprofileformcanelbuttonClick",
                "implHandler": [
                    "var myForm = this.getAdminProfileForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "\tmyFields.items[i].disable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "//var cancelButton\t= button.up().down('#onlyadminrofileformcanelbutton');",
                    "var saveButton\t\t= button.up().down('#adminprofileformsavebutton');",
                    "var editButton\t\t= button.up().down('#adminprofileformeditbutton');",
                    "editButton.enable();",
                    "saveButton.disable();",
                    "button.disable();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdminprofileformcanelbuttonClick",
            "designerId": "e15bb76d-3532-477c-a448-f9a0d185f68f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminprofileformsavebutton",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton18",
                "fn": "onAdminprofileformsavebuttonClick",
                "implHandler": [
                    "debugger;",
                    "var myForm = this.getAdminProfileForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "\tmyFields.items[i].disable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "var cancelButton\t= button.up().down('#adminprofileformcanelbutton');",
                    "//var saveButton\t\t= button.up().down('#adminprofileformsavebutton');",
                    "var editButton\t\t= button.up().down('#adminprofileformeditbutton');",
                    "editButton.enable();",
                    "cancelButton.disable();",
                    "button.disable();",
                    "this.saveProfileForm();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdminprofileformsavebuttonClick",
            "designerId": "ace62348-5d45-4da0-ac31-d741865ef905"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminpasswordcancelbutton",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton38",
                "fn": "onAdminpasswordcancelbuttonClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel Admin Password\" );",
                    "var myForm = button.up().up().getForm();",
                    "myForm.reset();",
                    "button.up().up().up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdminpasswordcancelbuttonClick",
            "designerId": "70d2bf41-50aa-445a-89b3-a5e33f2848db"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#adminpasswordsubmitbutton",
                "designer|params": [
                    "button, e, eOpts"
                ],
                "designer|targetType": "MyButton39",
                "fn": "onAdminpasswordsubmitbuttonClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit School Admin Password\" );",
                    "var myForm = button.up().up().getForm();",
                    "",
                    "var myStore = Ext.getStore(\"admin.AdminPasswordStore\");",
                    "var userName = myForm.findField('userName').getSubmitValue();",
                    "var userPassword = myForm.findField('userPassword').getSubmitValue();",
                    "var userRepeatPassword = myForm.findField('userRepeatPassword').getSubmitValue();",
                    "var myRecord = myStore.findRecord('userName', userName );",
                    "",
                    "if( myRecord === null )",
                    "{",
                    "\tExt.MessageBox.show({",
                    "\t\ttitle: 'INVALID USER EXCEPTION',",
                    "\t\tmsg: 'You have entered an invalid user.',",
                    "\t\ticon: Ext.MessageBox.ERROR,",
                    "\t\tbuttons: Ext.Msg.OK",
                    "\t});",
                    "}",
                    "if( userPassword == userRepeatPassword && myRecord !== null )",
                    "{",
                    "\tmyRecord.set( 'userPassword', userPassword );",
                    "\tmyStore.sync();",
                    "\t//myStore.reload();",
                    "}",
                    "myForm.reset();",
                    "button.up().up().up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onAdminpasswordsubmitbuttonClick",
            "designerId": "94166833-802c-43fd-9e0b-4a26a86f10f0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "reloadGrid",
                "implHandler": [
                    "var myStore = Ext.getStore('admin.AdminProfileStore');",
                    "myStore.reload();"
                ]
            },
            "name": "reloadGrid",
            "designerId": "704a160b-51a5-49f0-ad17-eaabe259a097"
        }
    ]
}