{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "bodiesofworkcontroller",
        "designer|userClassName": "bodiesofwork.MyController",
        "models": [
            "bodiesofwork.BodiesOfWorkModel"
        ],
        "stores": [
            "bodiesofwork.MyJsonStore",
            "subject.SubjectStore"
        ],
        "views": [
            "bodiesofwork.GridPanel"
        ]
    },
    "designerId": "8319d64d-3c90-47c7-801a-1277ea5b7979",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "this.selectedIndex = 0;",
                    "",
                    "this.control({",
                    "    \"#editbodiesofworkwhattabpanel\": {",
                    "        click: this.buttonHandler",
                    "    },",
                    "    \"#editbodiesofworkdescriptiontabpanel\": {",
                    "        click: this.buttonHandler",
                    "    },",
                    "    \"#editbodiesofworkobjectivetabpanel\": {",
                    "        click: this.buttonHandler",
                    "    },",
                    "    \"#bodiesofworkwhattabpaneltextbox\": {",
                    "        blur: this.blurHandler",
                    "    },",
                    "    \"#bodiesofworkdescriptiontabpaneltextbox\": {",
                    "        blur: this.blurHandler",
                    "    },",
                    "    \"#bodiesofworkobjectivetabpaneltextbox\": {",
                    "        blur: this.blurHandler",
                    "    }",
                    "",
                    "});"
                ]
            },
            "designerId": "c50d820c-1b95-4b19-91ae-67ec1019f6e0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#bodiesofworkssubjectsgrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onBodiesofworkssubjectsgridViewReady",
                "implHandler": [
                    "debugger;",
                    "console.log('onBodiesofworkssubjectsgridViewReady()');",
                    "var bws_ = Ext.getStore('bodiesofwork.MyJsonStore');",
                    "var ss_ = Ext.getStore('student.StudentStore');",
                    "var securityStore = Ext.getStore( 'security.SecurityStore');",
                    "var securityRecord = securityStore.getAt(0);",
                    "this.userName = securityRecord.get('userName');",
                    "this.userRole = securityRecord.get('userRole');",
                    "var studentName_;",
                    "var g_ = Ext.ComponentQuery.query(\"#bodiesofworkssubjectsgrid\")[0];",
                    "",
                    "var r_ = ss_.getAt(0);",
                    "//        debugger",
                    "if ( typeof( r_ ) !== \"undefined\" )",
                    "{",
                    "\tif( this.userRole !== \"ROLE_USER\")",
                    "\t{",
                    "\t\tstudentName_ = this.userName + '/' + this.userRole;",
                    "\t\tg_.setTitle( '[' + studentName_  + ']');",
                    "\t\tbws_.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this",
                    "\t\t});",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tstudentName_ = r_.get('firstName') + \" \" + r_.get('middleName') + ' ' + r_.get('lastName');",
                    "",
                    "\t\tg_.setTitle('[' + studentName_ + '] Bodies Of Work');",
                    "\t\tbws_.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this,",
                    "\t\t\tparams: {",
                    "\t\t\t\tstudentName: r_.get('userName'),",
                    "\t\t\t\tstudentId: r_.get('studentId')",
                    "\t\t\t}",
                    "\t\t});",
                    "\t}",
                    "}",
                    "else",
                    "{",
                    "\tstudentName_ = this.userName + '/' + this.userRole;",
                    "\tg_.setTitle('[' + studentName_ + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tstudentName: this.userName,",
                    "\t\tscope: this",
                    "\t});\t",
                    "}",
                    "//grid.getSelectionModel().select( 0 );",
                    "//tablepanel.getSelectionModel().select( 0 );",
                    ""
                ],
                "name": "viewready",
                "scope": "me"
            },
            "designerId": "766af778-34ac-43cf-96fe-83656525b639"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#bodiesofworkssubjectsgrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onBodiesofworkssubjectsgridSelectionChange",
                "implHandler": [
                    "//debugger;",
                    "// in the onMyJsonStoreLoad we do a deselect so we need to test",
                    "// if selected[0] has a value",
                    "if ( Ext.isDefined( selected  ) && Ext.isDefined( selected[0]  )) {",
                    "    this.loadTabPanelForm( this.getBodiesOfWorkWhatTabPanel(), selected, 'what' );",
                    "    this.loadTabPanelForm( this.getBodiesOfWorkDescriptionTabPanel(), selected, 'description' );",
                    "    this.loadTabPanelForm( this.getBodiesOfWorkObjectiveTabPanel(), selected, 'objective' );",
                    "    ",
                    "    console.log('onBodiesofworssubjectsgridSelectionChange()');",
                    "}",
                    ""
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "designerId": "79d0805f-0619-458a-99d5-df04799ae503"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#bodyofworkform",
                "designer|targetType": "Ext.form.Panel",
                "fn": "onBodyofworkformBoxReady",
                "implHandler": [
                    "//debugger;",
                    "console.log('onBodyofworkformBoxReady()');"
                ],
                "name": "boxready",
                "scope": "me"
            },
            "designerId": "f7ab9105-ff08-43e9-babb-32f518f46c20"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMyJsonStoreLoad",
                "implHandler": [
                    "//debugger;",
                    "var g_ = Ext.ComponentQuery.query(\"#bodiesofworkssubjectsgrid\")[0];",
                    "",
                    "if (g_.getStore().getCount() > 0) {",
                    "    g_.getSelectionModel().deselectAll();",
                    "    g_.getSelectionModel().select( this.selectedIndex );",
                    "}",
                    "",
                    "this.gridViewReady = true;",
                    ""
                ]
            },
            "designerId": "a3e4420d-ad2d-4a5e-acc0-ce0b0bc360f5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#bodiesofworkstab",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onBodiesofworkstabActivate",
                "implHandler": [
                    "// catch the tab activate but only reload if we have processed",
                    "// the viewready indicated by this.gridViewReady",
                    "console.log('#bodiesofworkstab.activate()');",
                    "",
                    "if ( Ext.isDefined( this.gridViewReady  ) ) {",
                    "    var g_ = Ext.ComponentQuery.query(\"#bodiesofworkssubjectsgrid\")[0];",
                    "",
                    "    g_.getStore().reload();",
                    "}",
                    ""
                ],
                "name": "activate",
                "scope": "me"
            },
            "designerId": "2fa0d2d1-36c0-4373-8d15-7e07916f4f04"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolrefreshbodiesofwork",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolrefreshbodiesofworkClick",
                "implHandler": [
                    "//debugger;",
                    "window.console.log( 'Refresh' );",
                    "var mystore = Ext.getStore(\"bodiesofwork.MyJsonStore\");",
                    "mystore.reload();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "12cc3baa-92d6-44eb-824b-ea2d81998492"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolsearchbodiesofwork",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolsearchbodiesofworkClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "4d1d2f84-5dcb-4b2b-8311-76af271286c5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolnewbodiesofwork",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolnewbodiesofworkClick",
                "implHandler": [
                    "debugger;",
                    "var qs_ = Ext.getStore('subject.SubjectStore');",
                    "var recCnt_ = qs_.getTotalCount();",
                    "",
                    "if (recCnt_ < 1)",
                    "{",
                    "    Ext.MessageBox.show({",
                    "        title : 'Body of Work Exception',",
                    "        msg : 'Subjects by Student is empty, please add a record there first.',",
                    "        icon : Ext.MessageBox.ERROR,",
                    "        buttons : Ext.Msg.OK",
                    "    });",
                    "",
                    "    return;",
                    "}",
                    "",
                    "var newDialog\t= Ext.create( 'MySchool.view.bodiesofwork.NewForm' );",
                    "var bws\t\t\t= Ext.getStore('bodiesofwork.MyJsonStore');",
                    "var ss\t\t\t= Ext.getStore('student.StudentStore');",
                    "var r_;",
                    "var studentName_ = newDialog.down('#newbodiesofworkform-studentName');",
                    "var qsCB_\t\t= newDialog.down('#newbodiesofworkform-quarter');",
                    "",
                    "if( this.userRole === 'ROLE_USER' )",
                    "\treturn;",
                    "",
                    "if( bws.count() > 0 )",
                    "{",
                    "\tr_ = bws.getAt( this.selectedIndex );",
                    "}",
                    "",
                    "if( typeof r_ !== 'undefined' )",
                    "{",
                    "\tvar studentRecord = ss.getAt(0);",
                    "\tvar sName = studentRecord.get('userName');",
                    "\tstudentName_.setValue(sName);",
                    "}",
                    "else",
                    "{",
                    "\t// This is the first time.",
                    "\tif( this.userRole === 'ROLE_USER' )",
                    "\t{",
                    "\t\t//var record = ss.findRecord( 'userName', this.userName );",
                    "\t\tstudentName_.setValue( this.userName );",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tstudentName_.setValue( \"Enter user name\" );",
                    "\t}",
                    "}",
                    "if( this.userRole !== 'ROLE_USER')",
                    "{",
                    "\tstudentName_.setReadOnly( false );",
                    "}",
                    "else",
                    "{",
                    "\tstudentName_.setReadOnly( true );",
                    "}",
                    "var commonQuarterSubjectStore\t= Ext.getStore( 'common.QuarterSubjectStore');",
                    "commonQuarterSubjectStore.myLoad();  // Added by Denis Putnam",
                    "",
                    "if (r_ === null)",
                    "{",
                    "    r_ = bws_.getAt(0);",
                    "}",
                    "if( false )",
                    "{",
                    "//if (r_) {",
                    "    var qtrId_ = r_.get('qtrId');",
                    "    var subjId_ = r_.get('subjId');",
                    "",
                    "    newDialog.loadRecord(r_);",
                    "",
                    "    //for( var i_ = 0; i_ < recCnt_; i_++ ) {",
                    "    //    r_ = qs_.getAt(i_);",
                    "    //    if (r_ !== null && qtrId_ == r_.get('qtrId') && subjId_ == r_.get('subjId')) {",
                    "    //        qsCB_.setValue(r_.get('id'));",
                    "    //        qsCB_.setDisabled(true);",
                    "    //        break;",
                    "    //    }",
                    "    //}",
                    "}",
                    "else",
                    "{",
                    "\t// no body of works records in database",
                    "    //var b_ = newDialog.down('#newbodiesofworkcreate');",
                    "    var workName_ = newDialog.down('#newbodiesofworkform-workName');",
                    "    var what_ = newDialog.down('#newbodiesofworkform-what');",
                    "    var desc_ = newDialog.down('#newbodiesofworkform-description');",
                    "    var obj_ = newDialog.down('#newbodiesofworkform-objective');",
                    "",
                    "    //b_.setDisabled(true);",
                    "    qsCB_.setValue(qs_.getAt(0).get('id'));",
                    "    workName_.setValue(\"replace_me_with_name\");",
                    "    what_.setValue(\"replace_me_with_what\");",
                    "    desc_.setValue(\"replace_me_with_description\");",
                    "    obj_.setValue(\"replace_me_with_objectives\");",
                    "}",
                    "",
                    "window.console.log( 'New' );",
                    "newDialog.render( Ext.getBody() );",
                    "newDialog.show();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "522f6424-1ae5-41b3-85e7-3278709b5254"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolsavebodiesofwork",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolsavebodiesofworkClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "2fd49992-fab7-4841-b35d-0ae3e19f0f99"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#tooldeletebodiesofwork",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onTooldeletebodiesofworkClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "fee12276-70bb-4a8d-a773-bc715de8bf9d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toollockbodiesofwork",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToollockbodiesofworkClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "ff5bc491-f051-42ca-becd-34b15514e2cd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newbodiesofworkcancel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewbodiesofworkcancelClick",
                "implHandler": [
                    "var bId_ = button.getItemId();",
                    "var newDialog = button.up('#newbodiesofworkform');",
                    "var myForm = newDialog.getForm();",
                    "var formValues = myForm.getValues();",
                    "var hide_ = true;",
                    "var okToSync_ = false;",
                    "//debugger;",
                    "if (bId_.indexOf(\"cancel\") < 0)",
                    "{",
                    "    //debugger;",
                    "    var qsCB_ = newDialog.down('#newbodiesofworkform-quarter');",
                    "",
                    "    if (bId_.indexOf(\"submit\") > 0)",
                    "    {",
                    "        //if (newDialog.down('#newbodiesofworkcreate').isDisabled())",
                    "        if( true )",
                    "        {",
                    "            var r_;",
                    "            var qsId_ = qsCB_.getValue();",
                    "",
                    "            if (qsId_ === null)",
                    "            {",
                    "                Ext.MessageBox.show({",
                    "                    title : 'Submit Exception',",
                    "                    msg : 'You must pick a Quarter and Subject.',",
                    "                    icon : Ext.MessageBox.ERROR,",
                    "                    buttons : Ext.Msg.OK",
                    "                });",
                    "            }",
                    "            else",
                    "            {",
                    "                //Ext.MessageBox.show({",
                    "                //    title : 'Submit BOW',",
                    "                //    msg : 'CREATE',",
                    "                //    icon : Ext.MessageBox.ERROR,",
                    "                //    buttons : Ext.Msg.OK",
                    "                //});",
                    "                // create an empty model record to add to the store.",
                    "                var bodyOfWorkRecord = Ext.create( 'MySchool.model.bodiesofwork.BodiesOfWorkModel' );",
                    "",
                    "                // get the store.",
                    "                var myStore = Ext.getStore('bodiesofwork.MyJsonStore');",
                    "",
                    "                debugger;",
                    "                // get the qtrName, subjName, qtrId, and subjId from the combo-box.",
                    "                var subjectStore\t\t\t= Ext.getStore( 'subject.SubjectStore' );",
                    "                var quarterSubjectId\t\t= formValues.comboquartersubject;",
                    "                var quarterSubjectRecord;",
                    "                for( var i = 0; i < subjectStore.count(); i++ )",
                    "                {",
                    "                    if( subjectStore.getAt(i).get('id') === quarterSubjectId )",
                    "                    {",
                    "                        quarterSubjectRecord = subjectStore.getAt(i);",
                    "                        break;",
                    "                    }",
                    "                }",
                    "",
                    "\t\t\t\tdebugger;",
                    "",
                    "                // collect the data from the form.",
                    "                var studentName = myForm.findField('studentUserName').getSubmitValue();",
                    "                var workName\t= myForm.findField('workName').getSubmitValue();",
                    "                var what\t\t= myForm.findField('what').getSubmitValue();",
                    "                var description\t= myForm.findField('description').getSubmitValue();",
                    "                var objective\t= myForm.findField('objective').getSubmitValue();",
                    "                //var subjId\t\t= myForm.findField('subjId').getSubmitValue();",
                    "                var subjId\t\t= quarterSubjectRecord.get('subjId');",
                    "                //var qtrId\t\t= myForm.findField('qtrId').getSubmitValue();",
                    "                var qtrId\t\t= quarterSubjectRecord.get('qtrId');",
                    "                //var qtrYear\t\t= myForm.findField('qtrYear').getSubmitValue();",
                    "                var qtrYear\t\t= quarterSubjectRecord.get('qtrYear');",
                    "                //var qtrName\t\t= myForm.findField('qtrName').getSubmitValue();",
                    "                var qtrName\t\t= quarterSubjectRecord.get('qtrName');",
                    "                var studentId\t= myForm.findField('studentId').getSubmitValue();",
                    "                //var subjName\t= myForm.findField('subjName').getSubmitValue();",
                    "                var subjName\t= quarterSubjectRecord.get('subjName');",
                    "                var subjGradeLevel\t= myForm.findField('subjGradeLevel').getSubmitValue();",
                    "                var subjCreditHours\t= myForm.findField('subjCreditHours').getSubmitValue();",
                    "                var whoUpdated\t= 'login';",
                    "                var lastUpdated\t= new Date();",
                    "                //bodyOfWorkRecord.set('', qsId_);",
                    "                bodyOfWorkRecord.set('studentUserName', studentName );",
                    "                bodyOfWorkRecord.set('workName', workName );",
                    "                bodyOfWorkRecord.set('what', what );",
                    "                bodyOfWorkRecord.set('description', description );",
                    "                bodyOfWorkRecord.set('objective', objective );",
                    "                // Next we need the subjId, qtrId, qtrYear, qtrName, gradeLevel, creditHours, whoUpdated, and lastUpdated.",
                    "                bodyOfWorkRecord.set('subjId', subjId );",
                    "                bodyOfWorkRecord.set('qtrId', qtrId );",
                    "                bodyOfWorkRecord.set('qtrYear', qtrYear );",
                    "                bodyOfWorkRecord.set('qtrName', qtrName );",
                    "                bodyOfWorkRecord.set('studentId', studentId );",
                    "                bodyOfWorkRecord.set('subjName', subjName );",
                    "                //bodyOfWorkRecord.set('', version );",
                    "                bodyOfWorkRecord.set('subjGradeLevel', subjGradeLevel );",
                    "                bodyOfWorkRecord.set('subjCreditHours', subjCreditHours );",
                    "                bodyOfWorkRecord.set('whoUpdated', whoUpdated );",
                    "                bodyOfWorkRecord.set('lastUpdated', lastUpdated );",
                    "",
                    "                // add the record to the store.",
                    "                myStore.add(bodyOfWorkRecord);",
                    "",
                    "                // sync it to the store",
                    "                myStore.sync();",
                    "            }",
                    "        }",
                    "        else",
                    "        {",
                    "            var r_ = myForm.getRecord();",
                    "            myForm.updateRecord(r_);",
                    "            //Ext.MessageBox.show({",
                    "            //    title : 'Submit BOW',",
                    "            //    msg : 'UPDATE',",
                    "            //    icon : Ext.MessageBox.ERROR,",
                    "            //    buttons : Ext.Msg.OK",
                    "            //});",
                    "            //r_.set('whoUpdated', 'login');",
                    "            //r_.set('lastUpdate', new Date() );",
                    "",
                    "            // get the store.",
                    "            //var myStore = Ext.getStore('bodiesofwork.MyJsonStore');",
                    "            //myStore.sync();",
                    "        }",
                    "    }",
                    "    else",
                    "    {",
                    "        //var b_ = newDialog.down('#newbodiesofworkcreate');",
                    "        var submitButton = newDialog.down('#newbodiesofworksubmit');",
                    "        var workName_ = newDialog.down('#newbodiesofworkform-workName');",
                    "        var what_ = newDialog.down('#newbodiesofworkform-what');",
                    "        var desc_ = newDialog.down('#newbodiesofworkform-description');",
                    "        var obj_ = newDialog.down('#newbodiesofworkform-objective');",
                    "",
                    "        //b_.setDisabled(true);",
                    "        //submitButton.setDisabled(false);",
                    "        qsCB_.setDisabled(false);",
                    "        hide_ = false;",
                    "",
                    "        workName_.setValue(\"replace_me_with_name\");",
                    "        workName_.setDisabled(false);",
                    "        what_.setValue(\"replace_me_with_what\");",
                    "        desc_.setValue(\"replace_me_with_description\");",
                    "        obj_.setValue(\"replace_me_with_objectives\");",
                    "    }",
                    "}",
                    "",
                    "if (hide_)",
                    "{",
                    "    myForm.reset();",
                    "    button.up().hide();",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "34238379-b16d-4c04-8d82-b5526b39f70e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newbodiesofworksubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewbodiesofworksubmitClick",
                "implHandler": [
                    "    this.onNewbodiesofworkcancelClick(button, e, eOpts);"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "9135f782-fb42-4abc-87c2-90fe18b2e107"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newbodiesofworkcreate",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewbodiesofworkcreateClick",
                "implHandler": [
                    "    this.onNewbodiesofworkcancelClick(button, e, eOpts);"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "60ab6003-cf7b-4fd0-91b9-22fd9c37a2df"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#bodiesofworkssubjectsgrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onBodiesofworkssubjectsgridSelect",
                "implHandler": [
                    "    window.console.log( \"selected row in grid.\" );",
                    "    window.console.log( \"index=\" + index );",
                    "    this.selectedIndex = index;"
                ],
                "name": "select",
                "scope": "me"
            },
            "designerId": "292467bf-d152-474e-b7b1-3c0383ab9564"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "BodiesOfWorkWhatTabPanel",
                "selector": "#bodiesofworkwhattabpanel"
            },
            "designerId": "43faf175-b2f0-4117-b97c-87a002245b0f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "BodiesOfWorkDescriptionTabPanel",
                "selector": "#bodiesofworkdescriptiontabpanel"
            },
            "designerId": "1492a6cd-fd8b-4d79-aa48-23624aa9ab91"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "BodiesOfWorkObjectiveTabPanel",
                "selector": "#bodiesofworkobjectivetabpanel"
            },
            "designerId": "969986f9-9843-44c8-8415-d583f8e84b5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tabPanel",
                    "selected",
                    "fieldname"
                ],
                "fn": "loadTabPanelForm",
                "implHandler": [
                    "debugger;",
                    "var dockedItems = tabPanel.getDockedItems();",
                    "var myForm = dockedItems[0];",
                    "",
                    "if( Ext.isDefined( myForm ) )",
                    "{",
                    "    console.log( myForm );",
                    "    //var textBox = myForm.dockedItems.items[0];",
                    "    var textBox = myForm.down('textareafield');",
                    "    textBox.name = fieldname;",
                    "    myForm.loadRecord( selected[0] );",
                    "}",
                    "else",
                    "{",
                    "    console.log( 'loadTabPanelForm(): No form' );",
                    "    //console.log( tabPanel );",
                    "}"
                ]
            },
            "designerId": "abdad28e-be44-4fc9-a955-e0b0df5af75d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "o",
                    "event",
                    "eOpts"
                ],
                "fn": "blurHandler",
                "implHandler": [
                    "debugger;",
                    "var p_\t\t\t= o.up('form').up('panel');",
                    "var myForm\t\t= o.up('form');",
                    "//var topP_\t\t= p_.up('panel');",
                    "var pItemId_\t= p_.getItemId();",
                    "var edit_\t\t= p_.down('#edit' + pItemId_);",
                    "var myTitle\t\t= p_.title;",
                    "console.log( edit_ );",
                    "//console.log( topP_ );",
                    "console.log( myForm );",
                    "console.log( \"pItemId_=\" + pItemId_);",
                    "//var myController = this;",
                    "",
                    "console.log( 'title=' + myTitle );",
                    "",
                    "//topP_.buttonHandler(edit_);",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Save Changes?',",
                    "    //msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',",
                    "    msg: 'Would you like to save your changes to ' + myTitle + ' ?',",
                    "    buttons: Ext.Msg.YESNO,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(buttonId) {",
                    "        var mystore\t\t= Ext.getStore(\"bodiesofwork.MyJsonStore\");",
                    "        if (buttonId == 'yes') {",
                    "            Ext.Msg.show({",
                    "                title: 'Save',",
                    "                msg: 'record saved',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            debugger;",
                    "",
                    "            var myTextArea\t= myForm.down('textareafield');",
                    "            var myName\t\t= myTextArea.getName();",
                    "            var myValue\t\t= myTextArea.getValue();",
                    "            var record\t\t= myForm.getRecord();",
                    "            record.set( myName, myValue );",
                    "            record.set( 'lastUpdated', new Date() );",
                    "            record.set( 'whoUpdated', 'login' );",
                    "",
                    "            mystore.sync();",
                    "        }",
                    "        else {",
                    "            Ext.Msg.show({",
                    "                title: 'Cancel',",
                    "                msg: 'record restored',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            mystore.reload();",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "//debugger;",
                    "this.buttonHandler( edit_ );"
                ]
            },
            "designerId": "ca710080-4cf8-4988-abbc-b6858e78191e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "buttonHandler",
                "implHandler": [
                    "debugger;",
                    "if( this.userRole === 'ROLE_USER' )",
                    "\treturn;",
                    "window.console.log(button);",
                    "var b_\t\t= button;",
                    "var form\t= b_.up('panel');",
                    "var p_\t\t= form.up();",
                    "var pItemId_ = p_.getItemId();",
                    "var field_;",
                    "",
                    "if (pItemId_ == 'dailyhourstab') {",
                    "    field_ = p_.down('numberfield');",
                    "} else {",
                    "    field_ = p_.down('textareafield');",
                    "}",
                    "",
                    "if (b_.getText().charAt(0) == 'D') {",
                    "    b_ = p_.down('#edit' + pItemId_);",
                    "    b_.setText('Edit');",
                    "    b_.setDisabled(false);",
                    "    field_.setDisabled(true);",
                    "} else {",
                    "    b_.setText('Done');",
                    "    field_.setDisabled(false);",
                    "    field_.focus();",
                    "}",
                    ""
                ]
            },
            "designerId": "7bef8609-2016-4903-8cdc-dbc9ce8afd43"
        }
    ]
}