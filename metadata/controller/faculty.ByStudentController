{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "facultybystudentcontroller",
        "designer|userClassName": "faculty.ByStudentController",
        "models": [
            "faculty.ByStudentModel"
        ],
        "stores": [
            "faculty.ByStudentStore"
        ]
    },
    "designerId": "f67c8368-e7ee-4d7c-949b-84a33169b9ad",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "FacultyByStudentGridPanel",
                "selector": "#facultyprofilesbystudentgridpanel"
            },
            "name": "FacultyByStudentGridPanel",
            "designerId": "cb28f2ed-2112-4629-afa1-211721c0d3f0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "FacultyByStudentForm",
                "selector": "#facultyprofileform"
            },
            "name": "FacultyByStudentForm",
            "designerId": "599294f2-ce10-4ee4-8b71-d6a0b6fb352c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, eOpts"
                ],
                "fn": "buttonHandler",
                "implHandler": [
                    "debugger;",
                    "window.console.log(button);",
                    "var b_\t\t= button;",
                    "var form\t= b_.up('panel');",
                    "var p_\t\t= form.up();",
                    "var pItemId_ = p_.getItemId();",
                    "var field_;",
                    "",
                    "if (pItemId_ === 'dailyhourstab') { //DENIS 12/24/2014",
                    "    field_ = p_.down('numberfield');",
                    "} else {",
                    "    field_ = p_.down('textareafield');",
                    "}",
                    "",
                    "if (b_.getText().charAt(0) === 'D') {//DENIS 12/24/2014",
                    "    b_ = p_.down('#edit' + pItemId_);",
                    "    b_.setText('Edit');",
                    "    b_.setDisabled(false);",
                    "    field_.setDisabled(true);",
                    "} else {",
                    "    b_.setText('Done');",
                    "    field_.setDisabled(false);",
                    "    field_.focus();",
                    "}"
                ]
            },
            "name": "buttonHandler",
            "designerId": "02a91a97-0b75-420d-a65a-b2d2167f0e8e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "o",
                    "event",
                    "eOpts"
                ],
                "fn": "blurHandler",
                "implHandler": [
                    "debugger;",
                    "var p_\t\t\t= o.up('form').up('panel');",
                    "//var myForm\t\t= o.up('form');",
                    "var myForm\t\t= this.getFacultyByStudentForm();",
                    "//var topP_\t\t= p_.up('panel');",
                    "var pItemId_\t= p_.getItemId();",
                    "var edit_\t\t= p_.down('#edit' + pItemId_);",
                    "var myTitle\t\t= p_.title;",
                    "console.log( edit_ );",
                    "//console.log( topP_ );",
                    "console.log( myForm );",
                    "console.log( \"pItemId_=\" + pItemId_);",
                    "//var myController = this;",
                    "",
                    "console.log( 'title=' + myTitle );",
                    "",
                    "//topP_.buttonHandler(edit_);",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Save Changes?',",
                    "    //msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',",
                    "    msg: 'Would you like to save your changes to ' + myTitle + ' ?',",
                    "    buttons: Ext.Msg.YESNO,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(buttonId) {",
                    "        var mystore\t\t= Ext.getStore(\"faculty.ByStudentStore\");",
                    "        if (buttonId == 'yes') {",
                    "            Ext.Msg.show({",
                    "                title: 'Save',",
                    "                msg: 'record saved',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            //debugger;",
                    "",
                    "            var myTextArea\t= myForm.down('textareafield');",
                    "            var myName\t\t= myTextArea.getName();",
                    "            var myValue\t\t= myTextArea.getValue();",
                    "            var record\t\t= myForm.getRecord();",
                    "            record.set( myName, myValue );",
                    "            record.set( 'lastUpdated', new Date() );",
                    "            record.set( 'whoUpdated', 'login' );",
                    "",
                    "            mystore.sync();",
                    "        }",
                    "        else {",
                    "            Ext.Msg.show({",
                    "                title: 'Cancel',",
                    "                msg: 'record restored',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            mystore.reload();",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "//debugger;",
                    "this.buttonHandler( edit_ );"
                ]
            },
            "name": "blurHandler",
            "designerId": "951e7d5c-3249-48f4-8ab0-bdb4bf837ab3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "form",
                    "record"
                ],
                "fn": "loadForm",
                "implHandler": [
                    "debugger;",
                    "",
                    "console.log( form );",
                    "",
                    "form.loadRecord( record );",
                    "var rform = form.getForm();",
                    "var myFields = form.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "\tvar myItemId = myFields.items[i].itemId;",
                    "\tif( this.userRole === 'ROLE_USER'){ //DENIS 12/24/2014",
                    "\t\tif( myItemId !== 'faculty-firstname' && myItemId !== 'faculty-middlename' && myItemId !== 'faculty-lastname' && myItemId !== 'faculty-email'){",
                    "\t\t\tmyFields.items[i].hide();",
                    "\t\t}",
                    "",
                    "\t}",
                    "",
                    "}",
                    "",
                    "",
                    "//DENIS 12/24/2014",
                    "var editButton = form.down('#facultyprofileformeditbutton');",
                    "if( this.userRole === 'ROLE_USER') {",
                    "\teditButton.disable();",
                    "}",
                    "else {",
                    "\teditButton.enable();",
                    "}",
                    "console.log('faculty.ByStudentController.loadForm(): completed');"
                ]
            },
            "name": "loadForm",
            "designerId": "d11a1acd-bbcb-4140-ae6a-dbe69113191a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMyJsonStoreLoad",
                "implHandler": [
                    "debugger;",
                    "//var g_ = Ext.ComponentQuery.query(\"#monthlysummarygridpanel\")[0];",
                    "var g_ = this.getFacultyByStudentGridPanel();",
                    "",
                    "if (g_.getStore().getCount() > 0) {",
                    "    g_.getSelectionModel().deselectAll();",
                    "    g_.getSelectionModel().select( 0 );",
                    "}",
                    "",
                    "this.gridViewReady = true;"
                ]
            },
            "name": "onMyJsonStoreLoad",
            "designerId": "af7a3cff-505e-4921-8a72-e5a93ca8121c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newfacultybystudentcanel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewfacultybystudentcanelClick",
                "implHandler": [
                    "//debugger;",
                    "window.console.log( \"Cancel New Monthly Evaluation\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNewfacultybystudentcanelClick",
            "designerId": "ceeb5ad7-be8d-44f9-998e-643d8d3cf522"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newfacultybystudentsubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewfacultybystudentsubmitClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit New Monthly Evaluations\" );",
                    "var myForm\t\t\t\t\t= button.up().getForm();",
                    "//var newDialog = button.up('monthlynewsummaryformpanel');",
                    "",
                    "//Get the values from the form and insert a new record into the MonthlySummaryView.",
                    "",
                    "var formValues\t\t\t\t= myForm.getValues();",
                    "",
                    "//\tCreate an empty record",
                    "var myRecord\t= Ext.create('MySchool.model.monthly.EvaluationRatings');",
                    "",
                    "//\tGet the stores that we will need",
                    "var myStore\t\t= this.getStore( 'monthly.EvaluationRatingsStore' );",
                    "",
                    "var studentStore = Ext.getStore('student.StudentStore');",
                    "var subjectStore = Ext.getStore( 'subject.SubjectStore' );",
                    "",
                    "//\tGet the student info",
                    "var studentRecord\t= studentStore.getAt(0);",
                    "var studentId\t\t= studentRecord.get( 'id' );",
                    "var studentName\t\t= studentRecord.get( 'userName' );",
                    "",
                    "//\tGet the quarterSubject record from the form.",
                    "var quarterSubjectId\t\t= formValues.comboquartersubject;",
                    "var quarterSubjectRecord;",
                    "for( var i = 0; i < subjectStore.count(); i++ )",
                    "{",
                    "    if( subjectStore.getAt(i).get('id') === quarterSubjectId )",
                    "    {",
                    "        quarterSubjectRecord = subjectStore.getAt(i);",
                    "        break;",
                    "    }",
                    "}",
                    "",
                    "if( typeof quarterSubjectRecord !== 'undefined')",
                    "{",
                    "    //\tGet the other information that we need for the new record.",
                    "    var subjName\t= quarterSubjectRecord.get('subjName');",
                    "    var subjId\t\t= quarterSubjectRecord.get('subjId');",
                    "    var qtrName\t\t= quarterSubjectRecord.get('qtrName');",
                    "    var qtrId\t\t= quarterSubjectRecord.get('qtrId');",
                    "    var qtrYear\t\t= quarterSubjectRecord.get('qtrYear');",
                    "    //var month_number = formValues.combomonth;",
                    "",
                    "    //var allSubjRec_ = myAllSubjStore.findRecord( 'subjName', subjName );",
                    "    //var subjId_ = allSubjRec_.get( 'subjId' );",
                    "",
                    "",
                    "    //Add the data to the new record.",
                    "    if( formValues.combomonth > 0 )",
                    "    {",
                    "        myRecord.set('month_number', formValues.combomonth);",
                    "        //myRecord.set('week_number', formValues.week_number);",
                    "",
                    "        myRecord.set('subjName', subjName );",
                    "        myRecord.set('subjId', subjId );",
                    "        myRecord.set('qtrName', qtrName );",
                    "        myRecord.set('qtrId', qtrId);",
                    "        myRecord.set('studentId', studentId);",
                    "        myRecord.set('studentUserName', studentName);",
                    "        myRecord.set('qtrYear', qtrYear);",
                    "",
                    "        myRecord.set('locked', 0 );",
                    "        myRecord.set('levelOfDifficulty', formValues.levelOfDifficulty);",
                    "        myRecord.set('criticalThinkingSkills', formValues.criticalThinkingSkills);",
                    "        myRecord.set('effectiveCorrectionActions', formValues.effectiveCorrectionActions);",
                    "        myRecord.set('completingCourseObjectives', formValues.completingCourseObjectives);",
                    "        myRecord.set('accuratelyIdCorrections', formValues.accuratelyIdCorrections);",
                    "        myRecord.set('thoughtfulnessOfReflections', formValues.thoughtfulnessOfReflections);",
                    "        myRecord.set('workingEffectivelyWithAdvisor', formValues.workingEffectivelyWithAdvisor);",
                    "        myRecord.set('responsibilityOfProgress', formValues.responsibilityOfProgress);",
                    "        myRecord.set('comments', formValues.comments);",
                    "",
                    "        myRecord.set('whoUpdated', 'login');",
                    "        myRecord.set('lastUpdated', new Date());",
                    "        myRecord.set('version', null);",
                    "        myRecord.set('monthlyevaluationId', 0 );",
                    "",
                    "        //add to the store",
                    "",
                    "        myStore.add( myRecord );",
                    "",
                    "        //sync the store.",
                    "        myStore.sync();",
                    "",
                    "        myForm.reset();",
                    "        button.up().hide();",
                    "    }",
                    "    else",
                    "    {",
                    "        var smsg = \"You must enter a value for month\";",
                    "        Ext.MessageBox.show({",
                    "            title: 'REMOTE EXCEPTION',",
                    "            msg: smsg,",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "    }",
                    "}",
                    "else",
                    "{",
                    "    var msg = \"You must have student/faculty/subject/quarter records.\";",
                    "            Ext.MessageBox.show({",
                    "            title: 'NO DATA',",
                    "            msg: smsg,",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNewfacultybystudentsubmitClick",
            "designerId": "44e9079d-4f57-427e-b1b6-1280759398b6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilerefreshtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onFacultyprofilerefreshtoolClick",
                "implHandler": [
                    "",
                    "debugger;",
                    "var myStore = Ext.getStore('faculty.ByStudentStore');",
                    "myStore.reload();",
                    "",
                    "if( false ){",
                    "//debugger;",
                    "console.log('onFacultyprofilerefreshtoolClick()');",
                    "var myStore = Ext.getStore('faculty.ByStudentStore');",
                    "",
                    "var securityStore = Ext.getStore('security.SecurityStore');",
                    "var securityRecord = securityStore.getAt(0);",
                    "this.userName = securityRecord.get('userName');",
                    "this.userRole = securityRecord.get('userRole');",
                    "var title;",
                    "var myGrid = this.getFacultyByStudentGridPanel();",
                    "",
                    "",
                    "if( this.userRole === 'ROLE_FACULTY'){",
                    "\ttitle = this.userName + '/' + this.userRole;",
                    "",
                    "",
                    "\tmyGrid.setTitle('[' + title + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this,",
                    "\t\tparams: {",
                    "\t\t\tstudentName: this.userName",
                    "\t\t}",
                    "\t});",
                    "}",
                    "else if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\ttitle = this.userName + '/' + this.userRole;",
                    "",
                    "",
                    "\tmyGrid.setTitle('[' + title + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this",
                    "\t});",
                    "}",
                    "else{",
                    "\ttitle = r_.get('firstName') + \" \" + r_.get('middleName') + ' ' + r_.get('lastName');",
                    "",
                    "\tmyGrid.setTitle('[' + title + ']' + ' Faculty Profiles by Student');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this,",
                    "\t\tparams: {",
                    "\t\t\tstudentName: this.userName",
                    "\t\t}",
                    "\t});",
                    "}",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofilerefreshtoolClick",
            "designerId": "5b00eb09-eb0a-46a4-968a-39034ac5a533"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilesearchtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onFacultyprofilesearchtoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofilesearchtoolClick",
            "designerId": "4e6e9649-b507-430b-8f0d-c22f9db192d6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilenewtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onFacultyprofilenewtoolClick",
                "implHandler": [
                    "/*",
                    "debugger;",
                    "var studentStore\t\t\t\t= Ext.getStore('student.StudentStore');",
                    "var subjectStore\t\t\t\t= Ext.getStore('subject.SubjectStore');",
                    "var commonQuarterSubjectStore\t= Ext.getStore( 'common.QuarterSubjectStore');",
                    "var commonMonthStore\t\t\t= Ext.getStore('common.MonthStore');",
                    "",
                    "var studentRecord\t= studentStore.getAt(0);",
                    "var studentId\t\t= studentRecord.get( 'id' );",
                    "var studentName\t\t= studentRecord.get( 'userName' );",
                    "",
                    "var newDialog = Ext.create( 'MySchool.view.faculty.NewFormPanel' );",
                    "",
                    "newDialog.down('#studentid').setValue( studentId );",
                    "newDialog.down('#studentname').setValue( studentName );",
                    "",
                    "//commonQuarterSubjectStore.myLoad();",
                    "commonMonthStore.myLoad();",
                    "",
                    "window.console.log( 'New Faculty By Student Dialog' );",
                    "",
                    "newDialog.render( Ext.getBody() );",
                    "newDialog.show();",
                    "*/"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofilenewtoolClick",
            "designerId": "d8c665b8-9649-48f2-b40b-2c847778f927"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilesavetool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onFacultyprofilesavetoolClick",
                "implHandler": [
                    "window.console.log( \"faculty.ByStudentStore.Save\" );",
                    "debugger;",
                    "",
                    "var mystore = Ext.getStore(\"faculty.ByStudentStore\");",
                    "",
                    "var records = mystore.getModifiedRecords();",
                    "for( var i = 0; i < records.length; i++ )",
                    "{",
                    "    records[i].set( 'lastUpdated', new Date() );",
                    "    records[i].set( 'whoUpdated', 'login');",
                    "}",
                    "",
                    "mystore.sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofilesavetoolClick",
            "designerId": "5af1c5ad-b150-48ed-b703-2c2f10742047"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofiledeletetool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onFacultyprofiledeletetoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofiledeletetoolClick",
            "designerId": "651893ca-4b87-4240-b818-19003ddb0537"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilelocktool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onFacultyprofilelocktoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofilelocktoolClick",
            "designerId": "c4f6c455-f141-4fa7-8c64-ff9ac8dcdc3a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilesbystudentgridpanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onFacultyprofilesbystudentgridpanelViewReady",
                "implHandler": [
                    "debugger;",
                    "console.log('onFacultyprofilesbystudnegridpanelViewReady()');",
                    "var myStore = Ext.getStore('faculty.ByStudentStore');",
                    "var myStudentStore = Ext.getStore('student.StudentStore');",
                    "var securityStore = Ext.getStore('security.SecurityStore');",
                    "var securityRecord = securityStore.getAt(0);",
                    "this.userName = securityRecord.get('userName');",
                    "this.userRole = securityRecord.get('userRole');",
                    "var studentName_;",
                    "var myGrid = this.getFacultyByStudentGridPanel();",
                    "",
                    "",
                    "var studentRecord = myStudentStore.getAt(0);",
                    "//        debugger",
                    "if ( typeof( studentRecord ) != \"undefined\" )",
                    "{",
                    "\tif( this.userRole !== 'ROLE_USER')",
                    "\t{",
                    "\t\tstudentName_ = this.userName + '/' + this.userRole;",
                    "",
                    "",
                    "\t\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\t\tmyStore.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this",
                    "\t\t});",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tstudentName_ = studentRecord.get('firstName') + \" \" + studentRecord.get('middleName') + ' ' + studentRecord.get('lastName');",
                    "\t\t//MonthlyDetailsGridPanel",
                    "\t\t//var myGrid = Ext.ComponentQuery.query(\"#bodiesofworkssubjectsgrid\")[0];",
                    "",
                    "\t\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\t\tmyStore.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this,",
                    "\t\t\tparams: {",
                    "\t\t\t\tstudentName: studentRecord.get('userName'),",
                    "\t\t\t\tstudentId: studentRecord.get('studentId')",
                    "\t\t\t}",
                    "\t\t});",
                    "\t}",
                    "}",
                    "else",
                    "{",
                    "\tstudentName_ = this.userName + '/' + this.userRole;",
                    "\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tstudentName: this.userName,",
                    "\t\tscope: this",
                    "\t});",
                    "}",
                    "//grid.getSelectionModel().select( 0 );",
                    "//tablepanel.getSelectionModel().select( 0 );",
                    "this.selectedIndex = 0;",
                    "myGrid.getSelectionModel().select(0);"
                ],
                "name": "viewready",
                "scope": "me"
            },
            "name": "onFacultyprofilesbystudentgridpanelViewReady",
            "designerId": "04767755-9b94-476b-9eb3-98c3a51ee53f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilegridpanelenabled",
                "designer|targetType": "Ext.grid.column.CheckColumn",
                "fn": "onFacultyprofilegridpanelenabledCheckChange",
                "implHandler": [
                    "debugger;",
                    "var myGrid = this.getFacultyByStudentGridPanel();",
                    "var myStore = this.getStore( 'faculty.ByStudentStore');",
                    "var record = myStore.getAt(rowIndex);",
                    "record.set( 'enabled', !checked );"
                ],
                "name": "checkchange",
                "scope": "me"
            },
            "name": "onFacultyprofilegridpanelenabledCheckChange",
            "designerId": "c3d0d251-496d-47f6-8d5b-4db544bfc25d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofileform",
                "designer|targetType": "Ext.form.Panel",
                "fn": "onFacultyprofileformBlur",
                "implHandler": [
                    "debugger;",
                    "console.log( 'faculty.ByStudentController.onFacultyprofileformBlur()');"
                ],
                "name": "blur",
                "scope": "me"
            },
            "name": "onFacultyprofileformBlur",
            "designerId": "d859ce77-ab88-41b2-b48c-cc6ee5217e69"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofileform",
                "designer|targetType": "Ext.form.Panel",
                "fn": "onFacultyprofileformFocus",
                "implHandler": [
                    "debugger;",
                    "console.log('faculty.ByStudentController.onFacultyprofileformFocus()');"
                ],
                "name": "focus",
                "scope": "me"
            },
            "name": "onFacultyprofileformFocus",
            "designerId": "05928870-2b7e-4aa1-9a0d-941629208e4a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofileformeditbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onFacultyprofileformeditbuttonClick",
                "implHandler": [
                    "debugger;",
                    "if( this.userRole === 'ROLE_USER' )//DENIS 12/24/2014",
                    "\treturn;",
                    "",
                    "var myForm = this.getFacultyByStudentForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].enable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "var cancelButton\t= button.up().down('#facultyprofileformcanelbutton');",
                    "var saveButton\t\t= button.up().down('#facultyprofileformsavebutton');",
                    "cancelButton.enable();",
                    "saveButton.enable();",
                    "button.disable();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofileformeditbuttonClick",
            "designerId": "c05663e5-de8a-490e-bc21-feff2c2d129d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofileformcanelbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onFacultyprofileformcanelbuttonClick",
                "implHandler": [
                    "var myForm = this.getFacultyByStudentForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "//var cancelButton\t= button.up().down('#facultyprofileformcanelbutton');",
                    "var saveButton\t\t= button.up().down('#facultyprofileformsavebutton');",
                    "var editButton\t\t= button.up().down('#facultyprofileformeditbutton');",
                    "editButton.enable();",
                    "saveButton.disable();",
                    "button.disable();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofileformcanelbuttonClick",
            "designerId": "4732424a-ba91-434c-b96e-f6d90ef7ef40"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofileformsavebutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onFacultyprofileformsavebuttonClick",
                "implHandler": [
                    "var myForm = this.getFacultyByStudentForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "var cancelButton\t= button.up().down('#facultyprofileformcanelbutton');",
                    "//var saveButton\t\t= button.up().down('#facultyprofileformsavebutton');",
                    "var editButton\t\t= button.up().down('#facultyprofileformeditbutton');",
                    "editButton.enable();",
                    "cancelButton.disable();",
                    "button.disable();",
                    "",
                    "this.saveFacultyByStudentForm();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofileformsavebuttonClick",
            "designerId": "f47d3ec9-e866-42ab-a208-1a8d223d75a0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveFacultyByStudentForm",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Save Faculty By Student Form\" );",
                    "//var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myForm = this.getFacultyByStudentForm();",
                    "",
                    "",
                    "//\tGet the stores that we will need",
                    "var myStore\t\t= this.getStore( 'faculty.ByStudentStore' );",
                    "",
                    "//var rForm = myForm.getForm();",
                    "",
                    "//var formValues1\t= myForm.getValues();",
                    "//var formValues\t= myForm.getForm().getValues();",
                    "var formFields\t= myForm.getForm().getFields();",
                    "//var name\t= formFields.items[0].name;",
                    "//var value\t= formFields.items[0].lastValue;",
                    "//var test\t= this.getFormValue( formFields, 'middleName');",
                    "//debugger;",
                    "",
                    "//\tCreate the form record.",
                    "var myRecord\t= myForm.getRecord();",
                    "",
                    "myRecord.set('firstName', this.getFormValue( formFields, 'firstName' ) );",
                    "myRecord.set('middleName', this.getFormValue( formFields, 'middleName' ));",
                    "myRecord.set('lastName', this.getFormValue( formFields, 'lastName' ));",
                    "myRecord.set('phone1', this.getFormValue( formFields, 'phone1' ));",
                    "myRecord.set('phone2', this.getFormValue( formFields, 'phone2' ));",
                    "myRecord.set('address1', this.getFormValue( formFields, 'address1' ));",
                    "myRecord.set('address2', this.getFormValue( formFields, 'address2' ));",
                    "myRecord.set('city', this.getFormValue( formFields, 'city' ));",
                    "myRecord.set('province', this.getFormValue( formFields, 'province' ));",
                    "myRecord.set('postalCode', this.getFormValue( formFields, 'postalCode' ));",
                    "myRecord.set('country', this.getFormValue( formFields, 'country' ));",
                    "myRecord.set('email', this.getFormValue( formFields, 'email' ));",
                    "",
                    "myRecord.set('whoUpdated', 'login');",
                    "myRecord.set('lastUpdated', new Date());",
                    "",
                    "debugger;",
                    "",
                    "//sync the store.",
                    "myStore.sync();"
                ]
            },
            "name": "saveFacultyByStudentForm",
            "designerId": "1d957178-2b12-44f1-890b-373812886c12"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "formFields",
                    "name"
                ],
                "fn": "getFormValue",
                "implHandler": [
                    "//var name\t= formFields.items[0].name;",
                    "//var value\t= formFields.items[0].lastValue;",
                    "for( var i = 0; i < formFields.length; i++ )",
                    "{",
                    "    if( formFields.items[i].name === name )",
                    "    {",
                    "        return formFields.items[i].lastValue;",
                    "    }",
                    "}",
                    "return \"\";"
                ]
            },
            "name": "getFormValue",
            "designerId": "efab196f-456e-4f94-9f05-019be4236590"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilesbystudenttab",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onFacultyprofilesbystudenttabActivate",
                "implHandler": [
                    "debugger;",
                    "//subjectsgrid",
                    "// catch the tab activate but only reload if we have processed",
                    "// the viewready indicated by this.gridViewReady",
                    "console.log('tab.activate()');",
                    "",
                    "if ( Ext.isDefined( this.gridViewReady  ) ) {",
                    "    //var g_ = Ext.ComponentQuery.query(\"#subjectsgrid\")[0];",
                    "\tvar g_ = this.getFacultyByStudentGridPanel();",
                    "",
                    "    g_.getStore().reload();",
                    "}",
                    "//this.onMyJsonStoreLoad();",
                    ""
                ],
                "name": "activate",
                "scope": "me"
            },
            "name": "onFacultyprofilesbystudenttabActivate",
            "designerId": "8b685d5e-3151-483f-970d-0a5ecbec5950"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofileassociatetool",
                "designer|targetType": "MyTool27",
                "fn": "onFacultyprofileassociatetoolClick",
                "implHandler": [
                    "debugger;",
                    "",
                    "var facultyByStudentStore = Ext.getStore('faculty.ByStudentStore');",
                    "facultyByStudentStore.load();",
                    "",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar newDialog = Ext.create( 'MySchool.view.faculty.AddChildDialog' );",
                    "",
                    "\twindow.console.log( 'Add Student to Another Faculty Dialog' );",
                    "",
                    "\tnewDialog.render( Ext.getBody() );",
                    "\tnewDialog.show();",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyprofileassociatetoolClick",
            "designerId": "6cf11aa3-dad8-4210-9a03-44786df31f63"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyaddchildsubmit",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton45",
                "fn": "onFacultyaddchildsubmitClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit Add Child\" );",
                    "var myPanel\t\t\t\t\t= button.up();",
                    "var myForm\t\t\t\t\t= myPanel.getForm();",
                    "//var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myGrid\t\t\t\t\t= this.getFacultyByStudentGridPanel();",
                    "",
                    "//Get the values from the form and insert a new record into the store.",
                    "",
                    "var formValues\t\t\t\t= myForm.getValues();",
                    "",
                    "//\tCreate an empty record",
                    "//var selectionModel = myGrid.getSelectionModel();",
                    "//var selection\t= selectionModel.getSelection();",
                    "var columns\t\t= myGrid.columns;",
                    "//debugger;",
                    "var myRecord\t= myGrid.getSelectionModel().getSelection()[0];",
                    "//var fields\t\t= selectionModel.getFields();",
                    "//var recordLen\t= fields.length;",
                    "//var myNewRecord\t= Ext.create('MySchool.model.faculty.ByStudentModel');",
                    "",
                    "//\tGet the stores that we will need",
                    "",
                    "var username\t= formValues.username;",
                    "",
                    "var myStore\t\t= this.getStore( 'faculty.ByStudentStore' );",
                    "",
                    "//debugger;",
                    "",
                    "",
                    "",
                    "",
                    "// For some reason setting the id to null doesn't work.",
                    "//\tforcing things this way.",
                    "//var currentDataIndex;",
                    "//for( var i = 0; i < columns.length; i++ ){",
                    "//\tif( columns[i].dataIndex !== 'id' ){",
                    "//\t\tcurrentDataIndex = columns[i].dataIndex;",
                    "//\t\tmyNewRecord[currentDataIndex] = myRecord.get( currentDataIndex );",
                    "//\t}",
                    "//}",
                    "//myRecord.set( 'studentId', myRecord.get('studentId') );",
                    "myRecord.set( 'studentUserName', username );",
                    "myRecord.set( 'id', null );",
                    "",
                    "",
                    "",
                    "//add to the store.  For a normal update, only the sync() is called.",
                    "//In this case we are expecting the create method on the backend to",
                    "//perform an update instead of a create.  This will allow updated from",
                    "//the grid to work as expected while allowing us to add a new faculty",
                    "//child to the existing student relation.  This will actually create",
                    "//another record in the student_faculty table.",
                    "",
                    "myStore.add( myRecord );",
                    "",
                    "//sync the store.",
                    "myStore.sync();",
                    "",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyaddchildsubmitClick",
            "designerId": "08c2adab-81da-442d-92d6-eabfba7328c9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyaddchildcancel",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton44",
                "fn": "onFacultyaddchildcancelClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel Add Faculty to Student\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onFacultyaddchildcancelClick",
            "designerId": "fa6327ad-2986-455a-989b-f2165108ff04"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#facultyprofilesbystudentgridpanel",
                "designer|params": [
                    "rowmodel",
                    "record",
                    "index",
                    "eOpts"
                ],
                "designer|targetType": "faculty.ProfileGridPanel",
                "fn": "onFacultyprofilesbystudentgridpanelSelect",
                "implHandler": [
                    "debugger;",
                    "",
                    "var myForm = this.getFacultyByStudentForm();",
                    "this.loadForm( myForm, record );",
                    "rowmodel.deselect( this.selectedIndex, true );",
                    "this.selectedIndex = index;",
                    "rowmodel.select( index, false, true );"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "onFacultyprofilesbystudentgridpanelSelect",
            "designerId": "122753c3-83a9-4531-8cf5-6694f64f30a1"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "Ext.getStore('faculty.ByStudentStore').addListener('datachanged', this.onGridDataChanged, this );",
                    "Ext.getStore('faculty.ByStudentStore').addListener('load', this.onGridDataLoaded, this );"
                ]
            },
            "name": "init",
            "designerId": "602de07b-0a76-4cc5-99a0-c2061c39a356"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridDataChanged",
                "implHandler": [
                    "debugger;",
                    "var myGrid = this.getFacultyByStudentGridPanel();",
                    "var myModel = myGrid.getSelectionModel();",
                    "myModel.deselectAll();",
                    "this.selectedIndex = 0;",
                    "myModel.select(0, false, true);",
                    "var mySelected = myModel.getLastSelected();",
                    "myModel.fireEvent( 'selectionchange', this, mySelected );"
                ]
            },
            "name": "onGridDataChanged",
            "designerId": "22a044fd-1043-47c9-a87f-84e37fa0323b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridDataLoaded",
                "implHandler": [
                    "debugger;"
                ]
            },
            "name": "onGridDataLoaded",
            "designerId": "bc3a6b2b-d710-4999-a5ef-e4e5539a5caa"
        }
    ]
}