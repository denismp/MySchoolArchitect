{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "subject.SubjectsController",
        "models": [
            "subject.SubjectsModel",
            "quarters.QuarterModel",
            "student.StudentModel",
            "subject.QuarterNamesModel"
        ],
        "selectedIndex": "0",
        "stores": [
            "subject.SubjectStore",
            "quarter.QuarterStore",
            "student.StudentStore",
            "subject.GradeTypeStore",
            "subject.AllSubjectStore",
            "subject.QuarterYearStore"
        ],
        "views": [
            "MainPanel",
            "subject.SubjectsGridPanel",
            "subject.SubjectsForm",
            "subject.SubjectsPanel",
            "subject.GradeTypeComboBox",
            "subject.QuarterNamesComboBox"
        ]
    },
    "designerId": "48a06a06-a1a5-4faa-8c59-edc7ba324ea9",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "selectedIndex",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "subjectsForm",
                "selector": "form"
            },
            "designerId": "a677eea6-6182-4b3d-abe9-2c77b8349cf8"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "",
                    "this.control({",
                    "    'subjectsgridpanel': {",
                    "        selectionchange: this.gridSelectionChange,",
                    "        viewready: this.onViewReady",
                    "    },",
                    "    'subjectsavetool': {",
                    "        click: this.onSubjectsavetoolidClick",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "a1acc81a-0b74-4fbd-9f59-101d0487b105"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "grid"
                ],
                "fn": "onViewReady",
                "implHandler": [
                    "grid.getSelectionModel().select( 0 );"
                ]
            },
            "designerId": "c01354bc-cff9-4b49-a085-01122381d726"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tool",
                    "e",
                    "eOpts"
                ],
                "fn": "onSubjectsavetoolidClick",
                "implHandler": [
                    "window.console.log( \"Save\" );",
                    "//debugger;",
                    "",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "",
                    "var records = mystore.getModifiedRecords();",
                    "for( var i = 0; i < records.length; i++ )",
                    "{",
                    "    records[i].set( 'qtrLastUpdated', new Date() );",
                    "    //records[i].set( 'quarter.lastUpdated', new Date() );",
                    "    records[i].set( 'qtrWhoUpdated', 'login');",
                    "    if( false )",
                    "    {",
                    "        var form = this.getSubjectsForm().getForm();",
                    "        var formValues = form.getValues();",
                    "        records[i].set( 'subjDescription', formValues.subjDescription );",
                    "        records[i].set( 'subjObjectives', formValues.subjObjectives );",
                    "        window.console.log( 'objectives=' + formValues.subjObjectives );",
                    "        window.console.log( 'description=' + formValues.subjDescription );",
                    "    }",
                    "}",
                    "",
                    "mystore.sync();"
                ]
            },
            "designerId": "c20c579b-a96b-4693-ad0b-489d29c77a27"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#subjectsgrid",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onSubjectsgridSelect",
                "implHandler": [
                    "window.console.log( \"selected row in grid.\" );",
                    "window.console.log( \"index=\" + index );",
                    "//debugger;",
                    "//if ( record ) {",
                    "//    this.getSubjectsForm().getForm().loadRecord(record);",
                    "//}",
                    "this.selectedIndex = index;"
                ],
                "name": "select",
                "scope": "me"
            },
            "designerId": "34c8c61a-edd5-4e1c-b140-c4d578a186a3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#subjectdescriptiontextarea",
                "designer|targetType": "Ext.form.field.TextArea",
                "fn": "onSubjectdescriptiontextareaChange",
                "implHandler": [
                    "if( false )",
                    "{",
                    "window.console.log( 'selectedIndex=' + this.selectedIndex );",
                    "window.console.log( \"onSubjectdescriptiontextareraChange() field=\" + field );",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "var myrecord = mystore.getAt( this.selectedIndex );",
                    "myrecord.set( 'subjDescription', newValue );",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "6faad01a-7ee9-487e-a8c0-73ff1ef18a55"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#subjectobjectivetextarea",
                "designer|targetType": "Ext.form.field.TextArea",
                "fn": "onSubjectobjectivetextareaChange",
                "implHandler": [
                    "if( false )",
                    "{",
                    "window.console.log( 'selectedIndex=' + this.selectedIndex );",
                    "window.console.log( \"onSubjectobjectivetextareraChange() field=\" + field );",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "var myrecord = mystore.getAt( this.selectedIndex );",
                    "myrecord.set( 'subjObjectives', newValue );",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "aa1e32c5-5e5c-43c8-b93d-0ebeef246a20"
        },
        {
            "type": "processcfgfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "config"
                ],
                "fn": "processSubjectSubjectsController",
                "implHandler": [
                    "return config;"
                ]
            },
            "designerId": "c2194c93-8c40-4417-bed5-a3f655026c5d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "model",
                    "records"
                ],
                "fn": "gridSelectionChange",
                "implHandler": [
                    "//debugger;",
                    "if ( records[0] ) {",
                    "    this.getSubjectsForm().getForm().loadRecord(records[0]);",
                    "}"
                ]
            },
            "designerId": "3a6fa757-9e2b-4731-b8a3-392e1486d299"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#tooldeletestudentsbysubject",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onTooldeletestudentsbysubjectClick",
                "implHandler": [
                    "window.console.log( 'Delete' );"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "10448b54-6393-4184-b6b8-2278525d4f9a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolnewsubjects",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolnewsubjectsClick",
                "implHandler": [
                    "//        debugger;",
                    "window.console.log( 'New' );",
                    "var newDialog = Ext.create( 'MySchool.view.subject.NewForm' );",
                    "//window.console.log( \"DEBUG\" );",
                    "//newDialog.show();",
                    "",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "var myAllSubjStore = Ext.getStore(\"subject.AllSubjectStore\");",
                    "var subjAllEmpty_ = myAllSubjStore.getCount() < 1 ? true : false;",
                    "var mynamestore = Ext.getStore( \"subject.QuarterNameStore\" );",
                    "var mygradetypestore = Ext.getStore( \"subject.GradeTypeStore\" );",
                    "var qtrYrStore_ = Ext.getStore( \"subject.QuarterYearStore\" );",
                    "var myrecord = mystore.getAt( this.selectedIndex );",
                    "",
                    "//myrecord.set( 'description', newValue );",
                    "//window.console.log( myrecord.data );",
                    "//        newDialog.loadRecord(myrecord);",
                    "var myForm = newDialog.getForm();",
                    "var myFormFields = newDialog.getForm().getFields();",
                    "//        var myuserName = myrecord.data.studentName;",
                    "var qtrNameId_;",
                    "var gradeType_;",
                    "var subjId_ = null;",
                    "var allSubjRec_;",
                    "",
                    "var subjNameCombo_ = newDialog.down('subjectnamecombobox');",
                    "var qtrNameCombo_ = newDialog.down('quarternamescombobox');",
                    "var gradeTypeCombo_ = newDialog.down('gradetypecombobox');",
                    "var qtrYearCombo_ = newDialog.down('quarteryearcombobox');",
                    "var studentName_ = newDialog.down('#newsubjectform-studentName');",
                    "var newsubjectedit_ = newDialog.down('#newsubjectedit');",
                    "var newsubjectcreate_ = newDialog.down('#newsubjectcreate');",
                    "var newsubjectsubmit_ = newDialog.down('#newsubjectsubmit');",
                    "",
                    "if (myrecord) {",
                    "    window.console.log( myrecord.data );",
                    "}",
                    "",
                    "studentName_.setValue(this.studentName);",
                    "",
                    "qtrYearCombo_.setValue(myrecord ? parseInt(myrecord.data.qtrYear) : new Date().getFullYear());",
                    "",
                    "if (myrecord) {",
                    "    qtrNameId_ = mynamestore.findRecord( 'qtrName', myrecord.data.qtrName ).get( 'id' );",
                    "}",
                    "else {",
                    "    qtrNameId_ = mynamestore.getAt(0).get( 'id' );",
                    "}",
                    "qtrNameCombo_.setValue( qtrNameId_ );",
                    "",
                    "if (myrecord) {",
                    "    allSubjRec_ = myAllSubjStore.findRecord( 'subjName', myrecord.data.subjName );",
                    "    subjId_ = allSubjRec_.get( 'subjId' );",
                    "}",
                    "else {",
                    "    allSubjRec_ = myAllSubjStore.getAt(0);",
                    "    if (allSubjRec_) {",
                    "        subjId_ = allSubjRec_.get( 'subjId' );",
                    "    }",
                    "}",
                    "",
                    "if (subjId_) {",
                    "    subjNameCombo_.setValue(subjId_);",
                    "    this.onSubjComboSelect( subjNameCombo_, allSubjRec_, eOpts);",
                    "}",
                    "else {",
                    "    // no subject records in database",
                    "    newsubjectedit_.setDisabled(true);",
                    "    newsubjectsubmit_.setDisabled(true);",
                    "    subjNameCombo_.setDisabled(true);",
                    "    qtrNameCombo_.setDisabled(true);",
                    "    gradeTypeCombo_.setDisabled(true);",
                    "    qtrYearCombo_.setDisabled(true);",
                    "}",
                    "",
                    "if (myrecord) {",
                    "    gradeType_ = myrecord.data.qtrGradeType;",
                    "}",
                    "else {",
                    "    gradeType_ = mygradetypestore.getAt(0).get( 'value' );",
                    "}",
                    "gradeTypeCombo_.setValue( gradeType_ );",
                    "",
                    "//        newDialog.getForm().setValues( { userName: myuserName } );",
                    "",
                    "newDialog.subjEditMode = 'relate';",
                    "",
                    "newDialog.render( Ext.getBody() );",
                    "newDialog.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "5d4868ed-6a1c-470f-b090-c3b087ab1e9b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolsearchsubjects",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolsearchsubjectsClick",
                "implHandler": [
                    "window.console.log( 'Search' );"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "31fb3fa3-8dfe-4181-ab00-9fd7ab071d7d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#toolrefreshsubjects",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onToolrefreshsubjectsClick",
                "implHandler": [
                    "// Add refresh handler code here.  Use example from chapter 2 of book.",
                    "//debugger;",
                    "window.console.log( 'Refresh' );",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "mystore.reload();",
                    "//pnl.setTitle( 'Denis' );"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "e4ca8107-d4f4-45be-8249-08a2989f145a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newsubjectsubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewsubjectsubmitClick",
                "implHandler": [
                    "debugger;",
                    "//var mystore = this.getSubjectStoreStore();",
                    "window.console.log( \"Submit New Subject\" );",
                    "var p_ = button.up('newsubjectform');",
                    "var f_ = button.up().getForm();",
                    "var cb_ = p_.down('subjectnamecombobox');",
                    "var okToSync_ = true;",
                    "var subjAllVal_ = cb_.getValue();",
                    "var subjAllIdx_ = cb_.getStore().findExact('subjId', subjAllVal_);",
                    "var subjAllRec_ = cb_.getStore().getAt(subjAllIdx_);",
                    "var subjName_ = null;",
                    "var subjAllEmpty_ = cb_.getStore().getCount() < 1 ? true : false;",
                    "",
                    "if (p_.subjEditMode.charAt(0) == 'r') {",
                    "    subjName_ = subjAllRec_.data.subjName;",
                    "}",
                    "else {",
                    "    subjName_ = p_.down('#newsubjectform-subjName');",
                    "    subjName_ = Ext.String.trim(subjName_.getValue());",
                    "}",
                    "",
                    "if (subjName_.length < 1) {",
                    "    Ext.MessageBox.show({",
                    "        title: 'Submit Exception',",
                    "        msg: 'Subject name is empty.',",
                    "        icon: Ext.MessageBox.ERROR,",
                    "        buttons: Ext.Msg.OK",
                    "    });",
                    "    okToSync_ = false;",
                    "}",
                    "",
                    "if (okToSync_ && p_.subjEditMode.charAt(0) == 'r') {",
                    "    var qfCB_ = p_.down('#facultynamescombobox');",
                    "    var qnCB_ = p_.down('quarternamescombobox');",
                    "    var qyCB_ = p_.down('quarteryearcombobox');",
                    "    var gtCB_ = p_.down('gradetypecombobox');",
                    "    var gStore_ = Ext.getStore(\"subject.SubjectStore\");",
                    "    var recCnt_ = gStore_.getTotalCount();",
                    "    //          var recs_ = gStore_.getRange( 0, recCnt_ );",
                    "    var sv_ = qnCB_.getValue();",
                    "    var idx_ = qnCB_.getStore().findExact('id', sv_);",
                    "    var r_;",
                    "    var qtrName_;",
                    "    var qtrYear_;",
                    "    var facultyId;",
                    "",
                    "    r_ = qnCB_.getStore().getAt(idx_);",
                    "    qtrName_ = r_.data.qtrName;",
                    "    qtrYear_ = qyCB_.getValue();",
                    "    facultyId = qfCB_.getValue();",
                    "",
                    "    for( var i_ = 0; i_ < recCnt_; i_++ ) {",
                    "        r_ = gStore_.getAt(i_);",
                    "        if (r_ !== null\t\t\t\t\t\t&&",
                    "            subjName_ == r_.get('subjName')\t&&",
                    "            qtrName_ == r_.get('qtrName')\t&&",
                    "            qtrYear_ == r_.get('qtrYear'))",
                    "        {",
                    "            okToSync_ = false;",
                    "            break;",
                    "        }",
                    "    }",
                    "",
                    "    if (okToSync_) {",
                    "        r_ = Ext.create( 'MySchool.model.subject.SubjectsModel' );",
                    "",
                    "        r_.set('subjId', subjAllRec_.get('subjId'));",
                    "",
                    "        r_.set('facultyId', facultyId );",
                    "",
                    "        r_.set('studentName', this.studentName);",
                    "",
                    "        r_.set('qtrGrade', 0);",
                    "        r_.set('qtrGradeType', gtCB_.getValue());",
                    "        r_.set('qtrLastUpdated', new Date());",
                    "        r_.set('qtrName', qtrName_);",
                    "        r_.set('qtrWhoUpdated', 'login');",
                    "        r_.set('qtrYear', qtrYear_);",
                    "",
                    "        gStore_.add(r_);",
                    "        gStore_.sync();",
                    "    }",
                    "    else {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Submit Exception',",
                    "            msg: 'Subject and Quarter already related.',",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "    }",
                    "}",
                    "else if (okToSync_) {",
                    "    var subjDescription_ = p_.down('#newsubjectform-subjDescription');",
                    "    var subjObjectives_ = p_.down('#newsubjectform-subjObjectives');",
                    "    var subjGradeLevel_ = p_.down('#newsubjectform-subjGradeLevel');",
                    "    var subjCreditHours_ = p_.down('#newsubjectform-subjCreditHours');",
                    "    var oldIdx_ = subjAllIdx_;",
                    "    var idx_ = cb_.getStore().findExact('subjName', subjName_);",
                    "    var edit_ = p_.subjEditMode.charAt(0) == 'e';",
                    "",
                    "    if (! subjDescription_.isValid()) {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Submit Exception',",
                    "            msg: 'Subject description is not valid.',",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "        okToSync_ = false;",
                    "    }",
                    "",
                    "    if (! subjObjectives_.isValid()) {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Submit Exception',",
                    "            msg: 'Subject objectives is not valid.',",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "        okToSync_ = false;",
                    "    }",
                    "",
                    "    if (! subjGradeLevel_.isValid()) {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Submit Exception',",
                    "            msg: 'Subject Grade Level is not valid.',",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "        okToSync_ = false;",
                    "    }",
                    "",
                    "    if (! subjCreditHours_.isValid()) {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Submit Exception',",
                    "            msg: 'Subject Credit Hours is not valid.',",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "        okToSync_ = false;",
                    "    }",
                    "",
                    "    if (idx_ > -1 && (edit_ &&  oldIdx_ != idx_ || ! edit_)) {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Submit Exception',",
                    "            msg: 'Subject name is already in use.',",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "        okToSync_ = false;",
                    "    }",
                    "",
                    "    if (okToSync_) {",
                    "        var r_;",
                    "",
                    "        if (edit_) {",
                    "            r_ = subjAllRec_;",
                    "        }",
                    "        else {",
                    "            r_ = Ext.create( 'MySchool.model.subject.SubjectsModel' );",
                    "            cb_.getStore().add( r_ );",
                    "        }",
                    "",
                    "        if (subjAllEmpty_ || oldIdx_ != idx_) {",
                    "            r_.set('subjName', subjName_);",
                    "        }",
                    "",
                    "        subjDescription_ = Ext.String.trim(subjDescription_.getValue());",
                    "        subjObjectives_ = Ext.String.trim(subjObjectives_.getValue());",
                    "",
                    "        r_.set('subjCreditHours', subjCreditHours_.getValue());",
                    "        r_.set('subjDescription', subjDescription_);",
                    "        r_.set('subjGradeLevel', subjGradeLevel_.getValue());",
                    "        r_.set('subjLastUpdated', new Date());",
                    "        r_.set('subjObjectives', subjObjectives_);",
                    "        r_.set('subjWhoUpdated', 'login');",
                    "",
                    "        if (edit_) {",
                    "            cb_.getStore().sync({callback: this.onToolrefreshsubjectsClick});",
                    "        }",
                    "        else {",
                    "            cb_.getStore().sync();",
                    "        }",
                    "    }",
                    "}",
                    "",
                    "f_.reset();",
                    "button.up().hide();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "b3d92599-5297-4d2a-b7f4-7439220ea329"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newsubjectcancel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewsubjectcancelClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel New Subject\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "19e2a875-2a2c-4aa9-95b1-6a65f5222077"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name"
                ],
                "fn": "findQuarterIdByName",
                "implHandler": [
                    "var myqtrstore = Ext.getStore( \"subject.QuarterNameStore\" );",
                    "var index = myqtrstore.findRecord( 'qtrName', name ).get( 'id' );",
                    "return index;"
                ]
            },
            "designerId": "99536c6c-316b-4421-ba92-29a0c47c50e1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "quarterNameID"
                ],
                "fn": "getQuarterName",
                "implHandler": [
                    "var mynamestore = Ext.getStore( \"subject.QuarterNameStore\" );",
                    "var recCount = mynamestore.getTotalCount();",
                    "var records = mynamestore.getRange( 0, recCount );",
                    "for( var i = 0; i < recCount; i++ )",
                    "{",
                    "    window.console.log( \"qtrName=\" + records[i].get( 'qtrName' ) );",
                    "    window.console.log( \"id=\" + records[i].get( 'id' ) );",
                    "    var myId = records[i].get( 'id' );",
                    "    var myName = records[i].get( 'qtrName' );",
                    "    if( myId === quarterNameID )",
                    "    {",
                    "        return myName;",
                    "    }",
                    "}",
                    "return 'NONE';"
                ]
            },
            "designerId": "e6b1b17b-d3e0-42a3-b8c9-76fceb8d41db"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name",
                    "year"
                ],
                "fn": "getQuarterRecord",
                "implHandler": [
                    "debugger;",
                    "var qtrStore = Ext.getStore( 'quarter.QuarterStore' );",
                    "var qtrCount = qtrStore.getTotalCount();",
                    "var records = qtrStore.getRange( 0, qtrCount );",
                    "for( var i = 0; i < qtrCount; i++ )",
                    "{",
                    "    window.console.log( \"qtrName=\" + records[i].get( 'qtrName' ) );",
                    "    window.console.log( \"id=\" + records[i].get( 'id' ) );",
                    "    window.console.log( \"qtr_year=\" + records[i].get( 'qtr_year' ) );",
                    "    if( name == records[i].get( 'qtrName' ) && year == records[i].get( 'qtr_year' ) )",
                    "    {",
                    "        return records[i];",
                    "    }",
                    "}"
                ]
            },
            "designerId": "a39eb1bf-3b7e-4d1c-b60e-bf9e91f4c779"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name"
                ],
                "fn": "getSubjectRecord",
                "implHandler": [
                    "debugger;",
                    "var myStore = Ext.getStore( 'subject.SubjectStore' );",
                    "var recCount = myStore.getTotalCount();",
                    "var records = myStore.getRange( 0, recCount );",
                    "for( var i = 0; i < recCount; i++ )",
                    "{",
                    "    window.console.log( \"name=\" + records[i].get( 'name' ) );",
                    "    window.console.log( \"id=\" + records[i].get( 'id' ) );",
                    "    if( name == records[i].get( 'name' ) )",
                    "    {",
                    "        return records[i];",
                    "    }",
                    "}"
                ]
            },
            "designerId": "b88f258b-233e-4c40-95dd-77b5ac9f8cff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "userName"
                ],
                "fn": "getStudentRecord",
                "implHandler": [
                    "debugger;",
                    "var myStore = Ext.getStore( 'student.StudentStore' );",
                    "var recCount = myStore.getTotalCount();",
                    "var records = myStore.getRange( 0, recCount );",
                    "for( var i = 0; i < recCount; i++ )",
                    "{",
                    "    window.console.log( \"userName=\" + records[i].get( 'userName' ) );",
                    "    window.console.log( \"id=\" + records[i].get( 'id' ) );",
                    "    if( userName == records[i].get( 'userName' ) )",
                    "    {",
                    "        return records[i];",
                    "    }",
                    "}"
                ]
            },
            "designerId": "79598427-4fcc-456b-9b13-c5b9a1cf6a84"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLaunch",
                "implHandler": [
                    "//debugger;",
                    "// Use the automatically generated getter to get the store",
                    "//        debugger;",
                    "var studentStore_ = Ext.getStore('student.StudentStore');",
                    "var codeStore_ = Ext.getStore( \"subject.QuarterNameStore\" );",
                    "var allSubjectStore_ = Ext.getStore( \"subject.AllSubjectStore\" );",
                    "var qtrYrStore_ = Ext.getStore( \"subject.QuarterYearStore\" );",
                    "var yr_ = new Date().getFullYear();",
                    "",
                    "for (var i_ = yr_ - 5; i_ < yr_ + 5; i_++) {",
                    "    qtrYrStore_.add({name: i_, value: i_});",
                    "}",
                    "",
                    "this.studentName = 'denis';",
                    "",
                    "studentStore_.load({",
                    "    callback: this.onStudentStoreLoad,",
                    "    scope: this,",
                    "    params: {",
                    "        studentName: this.studentName",
                    "    }",
                    "});",
                    "",
                    "allSubjectStore_.load({",
                    "    callback: this.onAllSubjectStoreLoad,",
                    "    scope: this",
                    "});",
                    "",
                    "codeStore_.load({",
                    "    callback: this.onCodeStoreLoad,",
                    "    scope: this,",
                    "    params: {",
                    "        filterOn: 'QuarterNames'",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "996cc5c5-a5ea-4e9f-8735-e523c0f5b72c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onStudentStoreLoad",
                "implHandler": [
                    "debugger;",
                    "var studentStore_ = Ext.getStore('student.StudentStore');",
                    "var r_ = studentStore_.getAt(0);",
                    "//        debugger",
                    "if ( typeof( r_ ) != \"undefined\" ) {",
                    "    var subjectStore_ = Ext.getStore( 'subject.SubjectStore' );",
                    "    var studentName_ = r_.get('firstName') + \" \" + r_.get('middleName') + ' ' + r_.get('lastName');",
                    "    var g_ = Ext.ComponentQuery.query(\"#subjectsgrid\")[0];",
                    "",
                    "    g_.setTitle('[' + studentName_ + '] Subjects');",
                    "    subjectStore_.load({",
                    "        callback: this.onSubjectStoreLoad,",
                    "        scope: this,",
                    "        params: {",
                    "            studentName: r_.get('userName'),",
                    "            studentId: r_.get('studentId')",
                    "        }",
                    "    });",
                    "}"
                ]
            },
            "designerId": "d6d7a294-1f78-440b-863d-81208024bdbc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSubjectStoreLoad",
                "implHandler": [
                    "debugger;",
                    "var g_ = Ext.ComponentQuery.query(\"#subjectsgrid\")[0];",
                    "",
                    "if (g_.getStore().getCount() > 0) {",
                    "    g_.getSelectionModel().deselectAll();",
                    "    g_.getSelectionModel().select( 0 );",
                    "}"
                ]
            },
            "designerId": "fe341c7d-e646-4b94-8a07-310ab8985ba2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#subjectformedit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onSubjectformeditClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( 'Subject Edit' );",
                    "var newDialog = Ext.create( 'MySchool.view.subject.EditForm' );",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "var myrecord = mystore.getAt( this.selectedIndex );",
                    "newDialog.loadRecord(myrecord);",
                    "",
                    "newDialog.render( Ext.getBody() );",
                    "newDialog.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "96156d07-2149-40e7-85be-5b629f8f98fc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#editsubjectcancelbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onEditsubjectcancelbuttonClick",
                "implHandler": [
                    "//debugger;",
                    "window.console.log( \"Cancel Edit Subject\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "3b7f9eea-bf1d-4f47-a753-223af6226923"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#editsubjectsubmitbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onEditsubjectsubmitbuttonClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit Edit Subject\" );",
                    "var myForm = button.up().getForm();",
                    "",
                    "",
                    "var formValues = myForm.getValues();",
                    "//var myrecords;",
                    "//myrecords[this.selectedIndex].set( 'subjDescription', formValues.subjDescription );",
                    "//myrecords[this.selectedIndex].set( 'subjObjectives', formValues.subjObjectives );",
                    "window.console.log( 'objectives=' + formValues.subjObjectives );",
                    "window.console.log( 'description=' + formValues.subjDescription );",
                    "",
                    "var mystore = Ext.getStore(\"subject.SubjectStore\");",
                    "var value = mystore.getAt( this.selectedIndex ).get( 'subjDescription' );",
                    "window.console.log( \"Store subjDescription is \", value );",
                    "value = mystore.getAt( this.selectedIndex ).get( 'subjObjectives' );",
                    "window.console.log( \"Store subjObjectives are \", value );",
                    "",
                    "mystore.getAt( this.selectedIndex ).set( 'subjLastUpdated', new Date() );",
                    "mystore.getAt( this.selectedIndex ).set( 'subjDescription', formValues.subjDescription );",
                    "mystore.getAt( this.selectedIndex ).set( 'subjObjectives', formValues.subjObjectives );",
                    "",
                    "value = mystore.getAt( this.selectedIndex ).get( 'subjDescription' );",
                    "window.console.log( \"NEW STORE subjDescription=\" + value );",
                    "value = mystore.getAt( this.selectedIndex ).get( 'subjObjectives' );",
                    "window.console.log( \"NEW STORE subjObjectives=\" + value );",
                    "",
                    "",
                    "mystore.sync();",
                    "",
                    "myForm.reset();",
                    "button.up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "e93ad8c1-845d-47e4-af16-59f9ebf49bbc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#editsubjectdescription",
                "designer|targetType": "Ext.form.field.TextArea",
                "fn": "onEditsubjectdescriptionChange",
                "implHandler": [
                    "window.console.log( \"oldValue=\" + oldValue );",
                    "window.console.log( \"newValue=\" + newValue );"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "3f4c750e-bc33-4918-b3ef-5609a96e78fe"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#editsubjectobjectives",
                "designer|targetType": "Ext.form.field.TextArea",
                "fn": "onEditsubjectobjectivesChange",
                "implHandler": [
                    ""
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "23ed66a9-56b0-4f0d-afca-578e83042a21"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newsubjectedit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewsubjecteditClick",
                "implHandler": [
                    "debugger;",
                    "var myPanel_ = button.up('newsubjectform');",
                    "var myForm_ = button.up().getForm();",
                    "var subjectnamecombobox_ = myPanel_.down('subjectnamecombobox');",
                    "var quarternamescombobox = myPanel_.down('quarternamescombobox');",
                    "var quarteryearcombobox = myPanel_.down('quarteryearcombobox');",
                    "var gradetypecombobox = myPanel_.down('gradetypecombobox');",
                    "var facultynamescombobox = myPanel_.down('#facultynamescombobox');",
                    "var newsubjectformname_ = myPanel_.down('#newsubjectform-subjName');",
                    "var studentName_ = myPanel_.down('#newsubjectform-studentName');",
                    "var subjGradeLevel_ = myPanel_.down('#newsubjectform-subjGradeLevel');",
                    "var subjCreditHours_ = myPanel_.down('#newsubjectform-subjCreditHours');",
                    "var subjDescription_ = myPanel_.down('#newsubjectform-subjDescription');",
                    "var subjObjectives_ = myPanel_.down('#newsubjectform-subjObjectives');",
                    "var newsubjectedit_ = myPanel_.down('#newsubjectedit');",
                    "var newsubjectcreate_ = myPanel_.down('#newsubjectcreate');",
                    "var newsubjectsubmit_ = myPanel_.down('#newsubjectsubmit');",
                    "",
                    "newsubjectsubmit_.setText('Submit');",
                    "newsubjectsubmit_.setDisabled(false);",
                    "",
                    "newsubjectedit_.setDisabled(true);",
                    "newsubjectcreate_.setDisabled(true);",
                    "",
                    "subjectnamecombobox_.setVisible(false);",
                    "newsubjectformname_.setVisible(true);",
                    "subjGradeLevel_.setDisabled(false);",
                    "subjCreditHours_.setDisabled(false);",
                    "subjDescription_.setDisabled(false);",
                    "subjObjectives_.setDisabled(false);",
                    "quarternamescombobox.setDisabled(true);",
                    "quarteryearcombobox.setDisabled(true);",
                    "gradetypecombobox.setDisabled(true);",
                    "facultynamescombobox.setDisabled(true);",
                    "",
                    "if (button.getItemId().indexOf(\"create\") > 0) {",
                    "    newsubjectformname_.setValue(\"replace_me_with_name\");",
                    "    subjDescription_.setValue(\"replace_me_with_description\");",
                    "    subjObjectives_.setValue(\"replace_me_with_objectives\");",
                    "",
                    "    myPanel_.subjEditMode = 'create';",
                    "}",
                    "else {",
                    "    myPanel_.subjEditMode = 'edit';",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "de66a9a9-ac62-4e46-b347-02e1ee5c049b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newsubjectcreate",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewsubjectcreateClick",
                "implHandler": [
                    "this.onNewsubjecteditClick(button, e, eOpts);",
                    "",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "35de4cfd-3beb-43fa-aafe-a8c6c954dbc6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#subjectnamecombobox",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onSubjComboSelect",
                "implHandler": [
                    "//    \tdebugger;",
                    "window.console.log(\"onSubjComboSelect\");",
                    "var p_ = combo.up('newsubjectform');",
                    "var subjName_ = p_.down('#newsubjectform-subjName');",
                    "var subjGradeLevel_ = p_.down('#newsubjectform-subjGradeLevel');",
                    "var subjCreditHours_ = p_.down('#newsubjectform-subjCreditHours');",
                    "var subjDescription_ = p_.down('#newsubjectform-subjDescription');",
                    "var subjObjectives_ = p_.down('#newsubjectform-subjObjectives');",
                    "var r_ = Ext.isArray(records) ? records[0] : records;",
                    "",
                    "subjName_.setValue(r_.data.subjName);",
                    "subjGradeLevel_.setValue(r_.data.subjGradeLevel);",
                    "subjCreditHours_.setValue(r_.data.subjCreditHours);",
                    "subjDescription_.setValue(r_.data.subjDescription);",
                    "subjObjectives_.setValue(r_.data.subjObjectives);"
                ],
                "name": "select",
                "scope": "me"
            },
            "designerId": "41ec68d0-a640-4184-ac47-28e366c85e59"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAllSubjectStoreLoad",
                "implHandler": [
                    ""
                ]
            },
            "designerId": "34640e51-69c4-4413-9dce-ccf3a0d753f2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onCodeStoreLoad",
                "implHandler": [
                    ""
                ]
            },
            "designerId": "dfd9dc6f-42bf-47ae-b682-4107d9d9903a"
        }
    ]
}