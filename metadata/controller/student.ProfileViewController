{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "studentprofileviewcontroller",
        "designer|userClassName": "student.ProfileViewController",
        "models": [
            "monthly.EvaluationRatings"
        ],
        "stores": [
            "student.StudentStore",
            "faculty.FacultyTableStore",
            "student.StudentProfileStore",
            "subject.SchoolsStore"
        ]
    },
    "designerId": "b3a562d1-cfa6-410d-8886-ed080063e2c4",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "StudentProfileGridPanel",
                "selector": "#studentprofilegridpanel"
            },
            "name": "StudentProfileGridPanel",
            "designerId": "c6e6436c-98cf-40ec-83cc-c2d0600cd9f3"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "StudentProfileForm",
                "selector": "#studentprofileform"
            },
            "name": "StudentProfileForm",
            "designerId": "613daafd-9931-41cb-aaf6-d3365abcab08"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, eOpts"
                ],
                "fn": "buttonHandler",
                "implHandler": [
                    "debugger;",
                    "window.console.log(button);",
                    "var b_\t\t= button;",
                    "var form\t= b_.up('panel');",
                    "var p_\t\t= form.up();",
                    "var pItemId_ = p_.getItemId();",
                    "var field_;",
                    "",
                    "if (pItemId_ == 'dailyhourstab') {",
                    "    field_ = p_.down('numberfield');",
                    "} else {",
                    "    field_ = p_.down('textareafield');",
                    "}",
                    "",
                    "if (b_.getText().charAt(0) == 'D') {",
                    "    b_ = p_.down('#edit' + pItemId_);",
                    "    b_.setText('Edit');",
                    "    b_.setDisabled(false);",
                    "    field_.setDisabled(true);",
                    "} else {",
                    "    b_.setText('Done');",
                    "    field_.setDisabled(false);",
                    "    field_.focus();",
                    "}"
                ]
            },
            "name": "buttonHandler",
            "designerId": "1102184f-ec74-43e1-870e-4a9c2bbdd8f3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "o",
                    "event",
                    "eOpts"
                ],
                "fn": "blurHandler",
                "implHandler": [
                    "debugger;",
                    "var p_\t\t\t= o.up('form').up('panel');",
                    "//var myForm\t\t= o.up('form');",
                    "var myForm\t\t= this.getFacultyByStudentForm();",
                    "//var topP_\t\t= p_.up('panel');",
                    "var pItemId_\t= p_.getItemId();",
                    "var edit_\t\t= p_.down('#edit' + pItemId_);",
                    "var myTitle\t\t= p_.title;",
                    "console.log( edit_ );",
                    "//console.log( topP_ );",
                    "console.log( myForm );",
                    "console.log( \"pItemId_=\" + pItemId_);",
                    "//var myController = this;",
                    "",
                    "console.log( 'title=' + myTitle );",
                    "",
                    "//topP_.buttonHandler(edit_);",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Save Changes?',",
                    "    //msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',",
                    "    msg: 'Would you like to save your changes to ' + myTitle + ' ?',",
                    "    buttons: Ext.Msg.YESNO,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(buttonId) {",
                    "        var mystore\t\t= Ext.getStore(\"faculty.ByStudentStore\");",
                    "        if (buttonId == 'yes') {",
                    "            Ext.Msg.show({",
                    "                title: 'Save',",
                    "                msg: 'record saved',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            //debugger;",
                    "",
                    "            var myTextArea\t= myForm.down('textareafield');",
                    "            var myName\t\t= myTextArea.getName();",
                    "            var myValue\t\t= myTextArea.getValue();",
                    "            var record\t\t= myForm.getRecord();",
                    "            record.set( myName, myValue );",
                    "            record.set( 'lastUpdated', new Date() );",
                    "            record.set( 'whoUpdated', 'login' );",
                    "",
                    "            mystore.sync();",
                    "        }",
                    "        else {",
                    "            Ext.Msg.show({",
                    "                title: 'Cancel',",
                    "                msg: 'record restored',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            mystore.reload();",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "//debugger;",
                    "this.buttonHandler( edit_ );"
                ]
            },
            "name": "blurHandler",
            "designerId": "b44e1e52-906b-4e09-b266-b809850e240f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "form",
                    "record"
                ],
                "fn": "loadForm",
                "implHandler": [
                    "debugger;",
                    "",
                    "console.log( form );",
                    "//var textBox = myForm.dockedItems.items[0];",
                    "//var textBox = myForm.down('textareafield');",
                    "//textBox.name = fieldname;",
                    "form.loadRecord( record );",
                    "var rform = form.getForm();",
                    "var myFields = form.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "}",
                    "console.log('student.StudentProfileStore.loadForm(): completed');"
                ]
            },
            "name": "loadForm",
            "designerId": "14e692eb-de54-4e29-9ae3-e41d3c05cdd1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMyJsonStoreLoad",
                "implHandler": [
                    "debugger;",
                    "//var g_ = Ext.ComponentQuery.query(\"#monthlysummarygridpanel\")[0];",
                    "var g_ = this.getStudentProfileGridPanel();",
                    "",
                    "if (g_.getStore().getCount() > 0) {",
                    "    g_.getSelectionModel().deselectAll();",
                    "    g_.getSelectionModel().select( 0 );",
                    "}",
                    "",
                    "this.gridViewReady = true;"
                ]
            },
            "name": "onMyJsonStoreLoad",
            "designerId": "e0ffc90b-74da-4865-9b9e-66f76e64a1b8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveStudentProfileForm",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Save Student Profile Form\" );",
                    "//var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myForm = this.getStudentProfileForm();",
                    "",
                    "",
                    "//\tGet the stores that we will need",
                    "var myStore\t\t= this.getStore( 'student.StudentProfileStore' );",
                    "",
                    "//var rForm = myForm.getForm();",
                    "",
                    "//var formValues1\t= myForm.getValues();",
                    "//var formValues\t= myForm.getForm().getValues();",
                    "var formFields\t= myForm.getForm().getFields();",
                    "//var name\t= formFields.items[0].name;",
                    "//var value\t= formFields.items[0].lastValue;",
                    "//var test\t= this.getFormValue( formFields, 'middleName');",
                    "//debugger;",
                    "",
                    "//\tCreate the form record.",
                    "var myRecord\t= myForm.getRecord();",
                    "",
                    "myRecord.set('firstName', this.getFormValue( formFields, 'firstName' ) );",
                    "myRecord.set('middleName', this.getFormValue( formFields, 'middleName' ));",
                    "myRecord.set('lastName', this.getFormValue( formFields, 'lastName' ));",
                    "myRecord.set('phone1', this.getFormValue( formFields, 'phone1' ));",
                    "myRecord.set('phone2', this.getFormValue( formFields, 'phone2' ));",
                    "myRecord.set('address1', this.getFormValue( formFields, 'address1' ));",
                    "myRecord.set('address2', this.getFormValue( formFields, 'address2' ));",
                    "myRecord.set('city', this.getFormValue( formFields, 'city' ));",
                    "myRecord.set('province', this.getFormValue( formFields, 'province' ));",
                    "myRecord.set('postalCode', this.getFormValue( formFields, 'postalCode' ));",
                    "myRecord.set('country', this.getFormValue( formFields, 'country' ));",
                    "myRecord.set('email', this.getFormValue( formFields, 'email' ));",
                    "myRecord.set('dob', this.getFormValue( formFields, 'dob' ));",
                    "",
                    "myRecord.set('whoUpdated', 'login');",
                    "myRecord.set('lastUpdated', new Date());",
                    "",
                    "debugger;",
                    "",
                    "//sync the store.",
                    "myStore.sync();"
                ]
            },
            "name": "saveStudentProfileForm",
            "designerId": "d770d629-b3f0-42da-b4a6-b501ded24f05"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "formFields",
                    "name"
                ],
                "fn": "getFormValue",
                "implHandler": [
                    "//var name\t= formFields.items[0].name;",
                    "//var value\t= formFields.items[0].lastValue;",
                    "for( var i = 0; i < formFields.length; i++ )",
                    "{",
                    "    if( formFields.items[i].name === name )",
                    "    {",
                    "        return formFields.items[i].lastValue;",
                    "    }",
                    "}",
                    "return \"\";"
                ]
            },
            "name": "getFormValue",
            "designerId": "eafbbe55-5419-4099-9785-e128b9cefecd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilegridpanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onStudentprofilegridpanelViewReady",
                "implHandler": [
                    "debugger;",
                    "console.log('onStudentprofilegridpanelViewReady()');",
                    "var myStore = Ext.getStore('student.StudentProfileStore');",
                    "var myStudentStore = Ext.getStore('student.StudentStore');",
                    "var securityStore = Ext.getStore('security.SecurityStore');",
                    "var securityRecord = securityStore.getAt(0);",
                    "var studentRecord = myStudentStore.getAt(0);",
                    "this.userName = securityRecord.get('userName');",
                    "this.userRole = securityRecord.get('userRole');",
                    "var studentName_;",
                    "var myGrid = this.getStudentProfileGridPanel();",
                    "",
                    "//        debugger",
                    "if ( typeof( studentRecord ) != \"undefined\" )",
                    "{",
                    "\tif( this.userRole !== \"ROLE_USER\")",
                    "\t{",
                    "\t\tstudentName_ = this.userName + '/' + this.userRole;",
                    "",
                    "\t\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\t\tmyStore.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this",
                    "\t\t});",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tstudentName_ = studentRecord.get('firstName') + \" \" + studentRecord.get('middleName') + ' ' + studentRecord.get('lastName');",
                    "",
                    "\t\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\t\tmyStore.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this,",
                    "\t\t\tparams: {",
                    "\t\t\t\tstudentName: studentRecord.get('userName' ),",
                    "\t\t\t\tstudentId: studentRecord.get('studentId')",
                    "\t\t\t}",
                    "\t\t});",
                    "\t}",
                    "}",
                    "else",
                    "{",
                    "\tstudentName_ = this.userName + '/' + this.userRole;",
                    "",
                    "\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "",
                    "",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tscope: this,",
                    "\t\tparams: {",
                    "\t\t\tstudentName: this.userName",
                    "\t\t}",
                    "\t});",
                    "}",
                    "//grid.getSelectionModel().select( 0 );",
                    "//tablepanel.getSelectionModel().select( 0 );",
                    "this.selectedIndex = 0;",
                    "myGrid.getSelectionModel().select(0);"
                ],
                "name": "viewready",
                "scope": "me"
            },
            "name": "onStudentprofilegridpanelViewReady",
            "designerId": "39030bc6-3b3f-4b48-947b-152489447ec3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilegridenabledcolumn",
                "designer|targetType": "Ext.grid.column.CheckColumn",
                "fn": "onCheckcolumnCheckChange",
                "implHandler": [
                    "debugger;",
                    "var myGrid = this.getStudentProfileGridPanel();",
                    "var myStore = this.getStore( 'student.StudentProfileStore');",
                    "var record = myStore.getAt(rowIndex);",
                    "record.set( 'enabled', !checked );"
                ],
                "name": "checkchange",
                "scope": "me"
            },
            "name": "onCheckcolumnCheckChange",
            "designerId": "a4ea5ba7-f75d-4e8e-9d33-0771e6c7f536"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofileformeditbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentprofileformeditbuttonClick",
                "implHandler": [
                    "debugger;",
                    "",
                    "var myForm = this.getStudentProfileForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].enable();",
                    "}",
                    "//myForm.getForm().focus();studentprofileformeditbutton",
                    "var cancelButton\t= button.up().down('#studentprofileformcancelbutton');",
                    "var saveButton\t\t= button.up().down('#studentprofileformsavebutton');",
                    "cancelButton.enable();",
                    "saveButton.enable();",
                    "button.disable();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofileformeditbuttonClick",
            "designerId": "1ca800f8-cb1c-405a-a095-00b0902c706d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofileformcancelbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentprofileformcancelbuttonClick",
                "implHandler": [
                    "var myForm = this.getStudentProfileForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "//var cancelButton\t= button.up().down('#studentprofileformcancelbutton');",
                    "var saveButton\t\t= button.up().down('#studentprofileformsavebutton');",
                    "var editButton\t\t= button.up().down('#studentprofileformeditbutton');",
                    "editButton.enable();",
                    "saveButton.disable();",
                    "button.disable();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofileformcancelbuttonClick",
            "designerId": "19201af7-e4d9-41b7-aa4f-10b8ad2c4909"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofileformsavebutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentprofileformsavebuttonClick",
                "implHandler": [
                    "var myForm = this.getStudentProfileForm();",
                    "var myFields = myForm.getForm().getFields();",
                    "for( var i = 0; i < myFields.length; i++ )",
                    "{",
                    "    myFields.items[i].disable();",
                    "}",
                    "//myForm.getForm().focus();",
                    "var cancelButton\t= button.up().down('#studentprofileformcancelbutton');",
                    "//var saveButton\t\t= button.up().down('#studentprofileformsavebutton');",
                    "var editButton\t\t= button.up().down('#studentprofileformeditbutton');",
                    "editButton.enable();",
                    "cancelButton.disable();",
                    "button.disable();",
                    "this.saveStudentProfileForm();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofileformsavebuttonClick",
            "designerId": "69649640-7ed3-4c92-980e-62180bd81f6e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilerefreshtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentprofilerefreshtoolClick",
                "implHandler": [
                    "var myStore = Ext.getStore('student.StudentProfileStore');",
                    "var myGrid = this.getStudentProfileGridPanel();",
                    "//myGrid.removeAll();",
                    "//myStore.reload();",
                    "this.onStudentprofilegridpanelViewReady( myGrid, null );"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofilerefreshtoolClick",
            "designerId": "42623b21-a334-48b8-881b-7c525135dcbb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilesearchtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentprofilesearchtoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofilesearchtoolClick",
            "designerId": "e4cc5344-7315-4348-a185-bfa56b7b5738"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilenewtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentprofilenewtoolClick",
                "implHandler": [
                    "debugger;",
                    "var studentStore\t\t\t\t= Ext.getStore('student.StudentStore');",
                    "var facultyStore\t\t\t\t= Ext.getStore('faculty.FacultyTableStore');",
                    "",
                    "if( this.userRole !== 'ROLE_USER')",
                    "{",
                    "\tvar newDialog = Ext.create( 'MySchool.view.student.NewDialog' );",
                    "\tvar facultyComboBox = this.getFacultyComboBox();",
                    "\tif( this.userRole === 'ROLE_FACULTY')",
                    "\t{",
                    "\t\tfacultyComboBox.setVisible( false );",
                    "\t\tfacultyComboBox.forceSelection = false;",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tfacultyComboBox.setVisible( true );",
                    "\t\tfacultyComboBox.forceSelection = true;",
                    "\t}",
                    "",
                    "\twindow.console.log( 'New Student Dialog' );",
                    "",
                    "\tnewDialog.render( Ext.getBody() );",
                    "\tnewDialog.show();",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofilenewtoolClick",
            "designerId": "c5790568-0bcc-4629-a0f3-91ddb8a3c8c0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilesavetool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentprofilesavetoolClick",
                "implHandler": [
                    "window.console.log( \"student.StudentProfileStore.Save\" );",
                    "debugger;",
                    "",
                    "var mystore = Ext.getStore(\"student.StudentProfileStore\");",
                    "",
                    "var records = mystore.getModifiedRecords();",
                    "for( var i = 0; i < records.length; i++ )",
                    "{",
                    "    records[i].set( 'lastUpdated', new Date() );",
                    "    records[i].set( 'whoUpdated', 'login');",
                    "}",
                    "",
                    "mystore.sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofilesavetoolClick",
            "designerId": "b04aa3e7-2ce1-48b6-8a32-6c60267f3c90"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofiledeletetool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentprofiledeletetoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofiledeletetoolClick",
            "designerId": "4399c621-0567-4579-b233-1e0c1d0b0f67"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilelocktool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentprofilelocktoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofilelocktoolClick",
            "designerId": "40e23081-ad11-42c4-92a1-bc19d5c0593e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentcancel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentcancelClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel New Student\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentcancelClick",
            "designerId": "7a44316a-e1cd-4cfc-ae62-8f55111c8e19"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentsubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentsubmitClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit New Student\" );",
                    "var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myPanel\t\t\t\t\t= button.up();",
                    "var myGrid\t\t\t\t\t= this.getStudentProfileGridPanel();",
                    "",
                    "//Get the values from the form and insert a new record into the StudentStore.",
                    "",
                    "var formValues\t\t\t\t= myForm.getValues();",
                    "",
                    "//\tCreate an empty record",
                    "var myRecord\t= Ext.create('MySchool.model.student.StudentProfileModel');",
                    "",
                    "//\tGet the stores that we will need",
                    "",
                    "var firstname\t= formValues.firstname;",
                    "var middlename\t= formValues.middlename;",
                    "var lastname\t= formValues.lastname;",
                    "var phone1\t\t= formValues.phone1;",
                    "var phone2\t\t= formValues.phone2;",
                    "var address1\t= formValues.address1;",
                    "var address2\t= formValues.address2;",
                    "var city\t\t= formValues.city;",
                    "var state\t\t= formValues.state;",
                    "var postalcode\t= formValues.postalcode;",
                    "var country\t\t= formValues.country;",
                    "var email\t\t= formValues.email;",
                    "var username\t= formValues.username;",
                    "var password\t= formValues.password;",
                    "var dob\t\t\t= formValues.dob;",
                    "var schoolname\t= formValues.schoolName;",
                    "",
                    "",
                    "var myStore\t\t= this.getStore( 'student.StudentProfileStore' );",
                    "var facultyStore= this.getStore('faculty.FacultyTableStore');",
                    "var schoolStore = this.getStore('subject.SchoolsStore');",
                    "var facultyComboBox = myPanel.down('#facultynamescombobox');",
                    "",
                    "//var selectedIndex = myGrid.getSelectionModel().getSelection()[0].index;",
                    "",
                    "//var myRecord = myStore.getAt(selectedIndex);",
                    "",
                    "var facultyId;",
                    "",
                    "if( this.userRole === 'ROLE_FACULTY' )",
                    "{",
                    "\tvar facultyRecord = facultyStore.findRecord( 'userName', this.userName );",
                    "\tif( facultyRecord !== null )",
                    "\t{",
                    "\t\tfacultyId = facultyRecord.get('id');",
                    "\t}",
                    "}",
                    "else",
                    "{",
                    "\tfacultyId = facultyComboBox.getValue();",
                    "}",
                    "//debugger;",
                    "",
                    "if( facultyStore.count() > 0 )",
                    "{",
                    "    myRecord.set( 'id', null );",
                    "    //myRecord.set( 'version', null );",
                    "",
                    "    myRecord.set( 'facultyId', facultyId );",
                    "",
                    "    myRecord.set('whoUpdated', 'login');",
                    "    myRecord.set('lastUpdated', new Date());",
                    "\tmyRecord.set('email', email );",
                    "\tmyRecord.set('firstName', firstname );",
                    "\tmyRecord.set('middleName', middlename );",
                    "\tmyRecord.set('lastName', lastname);",
                    "\tmyRecord.set('phone1', phone1 );",
                    "\tmyRecord.set('phone2', phone2 );",
                    "\tmyRecord.set('address1', address1);",
                    "\tmyRecord.set('address2', address2);",
                    "\tmyRecord.set('city', city);",
                    "\tmyRecord.set('province', state);",
                    "\tmyRecord.set('postalCode',postalcode);",
                    "\tmyRecord.set('country',country);",
                    "\tmyRecord.set('userName',username);",
                    "\tmyRecord.set('userPassword',password);",
                    "\tmyRecord.set('enabled', true);",
                    "\tmyRecord.set('dob', dob );",
                    "\tmyRecord.set('schoolName', schoolname );",
                    "",
                    "    //add to the store",
                    "",
                    "    myStore.add( myRecord );",
                    "",
                    "    //sync the store.",
                    "    myStore.sync();",
                    "",
                    "    myForm.reset();",
                    "    button.up().hide();",
                    "\tbutton.up().up().close();",
                    "}",
                    "else",
                    "{",
                    "    var msg = \"You must have faculty records.\";",
                    "            Ext.MessageBox.show({",
                    "            title: 'NO DATA',",
                    "            msg: smsg,",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentsubmitClick",
            "designerId": "365e3138-6caf-42d6-afb4-594d82acf4f0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "studentpasswordtool",
                "selector": "#studentpasswordtool"
            },
            "name": "studentpasswordtool",
            "designerId": "57da1c08-f706-4f99-94d8-179ab6c7683e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentpasswordtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onStudentpasswordtoolClick",
                "implHandler": [
                    "debugger;",
                    "var studentStore\t\t\t\t= Ext.getStore('student.StudentStore');",
                    "//var facultyStore\t\t\t\t= Ext.getStore('faculty.FacultyTableStore');",
                    "//var subjectStore\t\t\t\t= Ext.getStore('subject.SubjectStore');",
                    "//var commonQuarterSubjectStore\t= Ext.getStore( 'common.QuarterSubjectStore');",
                    "//var commonMonthStore\t\t\t= Ext.getStore('common.MonthStore');",
                    "",
                    "//var studentRecord\t= studentStore.getAt(0);",
                    "//var studentId\t\t= studentRecord.get( 'id' );",
                    "//var studentName\t\t= studentRecord.get( 'userName' );",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar newDialog = Ext.create( 'MySchool.view.student.PasswordDialog' );",
                    "",
                    "\t//newDialog.down('#studentid').setValue( studentId );",
                    "\t//newDialog.down('#studentname').setValue( studentName );",
                    "",
                    "\t//commonQuarterSubjectStore.myLoad();",
                    "\t//commonMonthStore.myLoad();",
                    "",
                    "\twindow.console.log( 'Password Dialog' );",
                    "",
                    "\tnewDialog.render( Ext.getBody() );",
                    "\tnewDialog.show();",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentpasswordtoolClick",
            "designerId": "64f8d86c-8512-4c02-9b02-542d383dfc70"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "FacultyComboBox",
                "selector": "#facultynamescombobox"
            },
            "name": "FacultyComboBox",
            "designerId": "381e54c2-5e4b-4409-944b-2815f3829312"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onLaunch",
                "implHandler": [
                    "//var facultyStore = Ext.getStore( 'faculty.FacultyTableStore' );",
                    "//var studentProfileStore = Ext.getStore('student.StudentProfileStore');",
                    "//var myStudentStore = Ext.getStore('student.StudentStore');",
                    "//var securityStore = Ext.getStore('security.SecurityStore');",
                    "",
                    "//debugger;",
                    "//facultyStore.load({",
                    "//\tcallback: this.onFacultyStoreLoad,",
                    "//\tscope: this",
                    "//\t}",
                    "//);",
                    "",
                    "//studentProfileStore.load();",
                    "//myStudentStore.load();",
                    "//securityStore.load();",
                    ""
                ]
            },
            "name": "onLaunch",
            "designerId": "694ec910-f60b-4961-a2e8-e60c12949e48"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onFacultyStoreLoad",
                "implHandler": [
                    ""
                ]
            },
            "name": "onFacultyStoreLoad",
            "designerId": "11b2cfda-a0e6-474b-be08-230eff47459b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentpasswordcancelbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentpasswordcancelbuttonClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel Student Password\" );",
                    "var myForm = button.up().up().getForm();",
                    "myForm.reset();",
                    "button.up().up().up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentpasswordcancelbuttonClick",
            "designerId": "3422483a-a202-43f9-9ae1-b24e7ce4d137"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentpasswordsubmitbutton",
                "designer|targetType": "Ext.button.Button",
                "fn": "onStudentpasswordsubmitbuttonClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit Student Password\" );",
                    "var myForm = button.up().up().getForm();",
                    "",
                    "var myStore = Ext.getStore(\"student.StudentPasswordStore\");",
                    "var userName = myForm.findField('userName').getSubmitValue();",
                    "var userPassword = myForm.findField('userPassword').getSubmitValue();",
                    "var userRepeatPassword = myForm.findField('userRepeatPassword').getSubmitValue();",
                    "var myRecord = myStore.findRecord('userName', userName );",
                    "",
                    "if( myRecord === null )",
                    "{",
                    "\tExt.MessageBox.show({",
                    "\t\ttitle: 'INVALID USER EXCEPTION',",
                    "\t\tmsg: 'You have entered an invalid user.',",
                    "\t\ticon: Ext.MessageBox.ERROR,",
                    "\t\tbuttons: Ext.Msg.OK",
                    "\t});",
                    "}",
                    "if( userPassword == userRepeatPassword && myRecord !== null )",
                    "{",
                    "\tmyRecord.set( 'userPassword', userPassword );",
                    "\tmyStore.sync();",
                    "\t//myStore.reload();",
                    "}",
                    "myForm.reset();",
                    "button.up().up().up().hide();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentpasswordsubmitbuttonClick",
            "designerId": "a23ac3f2-ab80-4fe7-8f78-288467efc885"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilestab",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onStudentprofilestabActivate",
                "implHandler": [
                    "debugger;",
                    "//subjectsgrid",
                    "// catch the tab activate but only reload if we have processed",
                    "// the viewready indicated by this.gridViewReady",
                    "console.log('tab.activate()');",
                    "",
                    "if ( Ext.isDefined( this.gridViewReady  ) ) {",
                    "    //var g_ = Ext.ComponentQuery.query(\"#subjectsgrid\")[0];",
                    "\tvar g_ = this.getStudentProfileGridPanel();",
                    "",
                    "    g_.getStore().reload();",
                    "}",
                    ""
                ],
                "name": "activate",
                "scope": "me"
            },
            "name": "onStudentprofilestabActivate",
            "designerId": "74935354-3f9d-4560-9ab1-032bf387eafc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilesassociatetool",
                "designer|params": [
                    "tool",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyTool28",
                "fn": "onStudentprofilesassociatetoolClick",
                "implHandler": [
                    "debugger;",
                    "",
                    "//var guardianStore = Ext.getStore('guardian.GuardianProfileStore');",
                    "//var guardianTypesStore = Ext.getStore('guardian.GuardianTypeStore');",
                    "//guardianTypesStore.myLoad();",
                    "",
                    "if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){",
                    "\tvar newDialog = Ext.create( 'MySchool.view.student.AddChildDialog' );",
                    "",
                    "\twindow.console.log( 'Add School To Student Dialog' );",
                    "",
                    "\tnewDialog.render( Ext.getBody() );",
                    "\tnewDialog.show();",
                    "}",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentprofilesassociatetoolClick",
            "designerId": "1834074b-4f1e-47e7-8f6f-b9164dec5113"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentaddchildcancel",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton44",
                "fn": "onStudentaddchildcancelClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Cancel Add School To Student\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentaddchildcancelClick",
            "designerId": "c5513208-f2b7-44f8-bbde-5291386bb35f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentaddchildsubmit",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton45",
                "fn": "onStudentaddchildsubmitClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit Add School To Student\" );",
                    "var myForm\t\t\t\t\t= button.up().getForm();",
                    "var myPanel\t\t\t\t\t= button.up();",
                    "var myGrid\t\t\t\t\t= this.getStudentProfileGridPanel();",
                    "",
                    "//Get the values from the form and insert a new record into the StudentProfileStore.",
                    "",
                    "var formValues\t\t\t\t= myForm.getValues();",
                    "",
                    "//\tGet the selected record.",
                    "var myRecord = myGrid.getSelectionModel().getLastSelected();",
                    "//var myRecord\t= myGrid.getSelectionModel().getSelection()[0];",
                    "//var myRecord\t= Ext.create('MySchool.model.student.StudentProfileModel');",
                    "",
                    "//\tGet the stores that we will need",
                    "",
                    "var schoolname\t= formValues.schoolname;",
                    "",
                    "var myStore\t\t= this.getStore( 'student.StudentProfileStore' );",
                    "",
                    "//debugger;",
                    "",
                    "myRecord.set( 'schoolName', schoolname );",
                    "myRecord.set( 'id', null );",
                    "",
                    "//add to the store.  For a normal update, only the sync() is called.",
                    "//In this case we are expecting the create method on the backend to",
                    "//perform an update instead of a create.  This will allow updated from",
                    "//the grid to work as expected while allowing us to add a new student",
                    "//child to the existing guardian relation.  This will actually create",
                    "//another record in the guardian table with the new studentId.",
                    "//The backend checks to see if the studentId in this records is",
                    "//different from the one with the specified schoolName.  If so,",
                    "//then the new record will be created.",
                    "myStore.add( myRecord );",
                    "",
                    "//sync the store.",
                    "myStore.sync();",
                    "",
                    "myForm.reset();",
                    "button.up().hide();",
                    "button.up().up().close();",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onStudentaddchildsubmitClick",
            "designerId": "9becd7fb-d1ce-4f77-a6f2-b0bfbe5ac3a9"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "Ext.getStore('student.StudentProfileStore').addListener('datachanged', this.onGridDataChanged, this );"
                ]
            },
            "name": "init",
            "designerId": "d652abbe-1310-4ad5-8e81-ac27eee61d61"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onGridDataChanged",
                "implHandler": [
                    "debugger;",
                    "var myGrid = this.getStudentProfileGridPanel();",
                    "var myModel = myGrid.getSelectionModel();",
                    "myModel.deselectAll();",
                    "this.selectedIndex = 0;",
                    "myModel.select(0, false, true);",
                    "var mySelected = myModel.getLastSelected();",
                    "myModel.fireEvent( 'selectionchange', this, mySelected );"
                ]
            },
            "name": "onGridDataChanged",
            "designerId": "1c59b855-133c-4890-8566-9fcae955855c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#studentprofilegridpanel",
                "designer|params": [
                    "rowmodel",
                    "record",
                    "index",
                    "eOpts"
                ],
                "designer|targetType": "student.ProfileGridPanel",
                "fn": "onStudentprofilegridpanelSelect",
                "implHandler": [
                    "debugger;",
                    "",
                    "var myForm = this.getStudentProfileForm();",
                    "this.loadForm( myForm, record );",
                    "rowmodel.deselect( this.selectedIndex, true );",
                    "this.selectedIndex = index;",
                    "rowmodel.select( index, false, true );"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "onStudentprofilegridpanelSelect",
            "designerId": "c0a7ceaf-7a5e-45f2-bbbb-663d33e3d0fa"
        }
    ]
}