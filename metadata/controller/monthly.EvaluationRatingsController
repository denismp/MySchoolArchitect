{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "monthlyevaluationratingscontroller",
        "designer|userClassName": "monthly.EvaluationRatingsController",
        "models": [
            "monthly.EvaluationRatings"
        ],
        "stores": [
            "monthly.EvaluationRatingsStore"
        ]
    },
    "designerId": "ed628e8c-f38d-4cf7-8482-1b6b5d694712",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "MonthlyEvaluationGridPanel",
                "selector": "#monthlyevaluationgridpanel"
            },
            "name": "MonthlyEvaluationGridPanel",
            "designerId": "6bb20c93-dee8-43a5-ad7e-69f9a41dcbcd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "MonthlyCommentsTabPanel",
                "selector": "#monthlyevaluationcommentstabpanel"
            },
            "name": "MonthlyCommentsTabPanel",
            "designerId": "349c4547-6451-4e8d-91b7-b12eac11fc78"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, eOpts"
                ],
                "fn": "buttonHandler",
                "implHandler": [
                    "debugger;",
                    "if( this.userRole === 'ROLE_USER' )",
                    "\treturn;",
                    "window.console.log(button);",
                    "var b_\t\t= button;",
                    "var form\t= b_.up('panel');",
                    "var p_\t\t= form.up();",
                    "var pItemId_ = p_.getItemId();",
                    "var field_;",
                    "",
                    "if (pItemId_ == 'dailyhourstab') {",
                    "    field_ = p_.down('numberfield');",
                    "} else {",
                    "    field_ = p_.down('textareafield');",
                    "}",
                    "",
                    "if (b_.getText().charAt(0) == 'D') {",
                    "    b_ = p_.down('#edit' + pItemId_);",
                    "    b_.setText('Edit');",
                    "    b_.setDisabled(false);",
                    "    field_.setDisabled(true);",
                    "} else {",
                    "    b_.setText('Done');",
                    "    field_.setDisabled(false);",
                    "    field_.focus();",
                    "}"
                ]
            },
            "name": "buttonHandler",
            "designerId": "323e64d2-f8ee-40d7-aadd-bb0cd404e7c5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "o",
                    "event",
                    "eOpts"
                ],
                "fn": "blurHandler",
                "implHandler": [
                    "debugger;",
                    "var p_\t\t\t= o.up('form').up('panel');",
                    "var myForm\t\t= o.up('form');",
                    "//var topP_\t\t= p_.up('panel');",
                    "var pItemId_\t= p_.getItemId();",
                    "var edit_\t\t= p_.down('#edit' + pItemId_);",
                    "var myTitle\t\t= p_.title;",
                    "console.log( edit_ );",
                    "//console.log( topP_ );",
                    "console.log( myForm );",
                    "console.log( \"pItemId_=\" + pItemId_);",
                    "//var myController = this;",
                    "",
                    "console.log( 'title=' + myTitle );",
                    "",
                    "//topP_.buttonHandler(edit_);",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Save Changes?',",
                    "    //msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',",
                    "    msg: 'Would you like to save your changes to ' + myTitle + ' ?',",
                    "    buttons: Ext.Msg.YESNO,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(buttonId) {",
                    "        var mystore\t\t= Ext.getStore(\"monthly.EvaluationRatingsStore\");",
                    "        if (buttonId == 'yes') {",
                    "            Ext.Msg.show({",
                    "                title: 'Save',",
                    "                msg: 'record saved',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            //debugger;",
                    "",
                    "            var myTextArea\t= myForm.down('textareafield');",
                    "            var myName\t\t= myTextArea.getName();",
                    "            var myValue\t\t= myTextArea.getValue();",
                    "            var record\t\t= myForm.getRecord();",
                    "            record.set( myName, myValue );",
                    "            record.set( 'lastUpdated', new Date() );",
                    "            record.set( 'whoUpdated', 'login' );",
                    "",
                    "            mystore.sync();",
                    "        }",
                    "        else {",
                    "            Ext.Msg.show({",
                    "                title: 'Cancel',",
                    "                msg: 'record restored',",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.window.MessageBox.INFO",
                    "            });",
                    "            mystore.reload();",
                    "        }",
                    "",
                    "    }",
                    "});",
                    "//debugger;",
                    "this.buttonHandler( edit_ );"
                ]
            },
            "name": "blurHandler",
            "designerId": "b40d78f2-51d5-472b-9ae4-20f300b4fa81"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tabPanel",
                    "selected",
                    "fieldname"
                ],
                "fn": "loadTabPanelForm",
                "implHandler": [
                    "debugger;",
                    "var dockedItems = tabPanel.getDockedItems();",
                    "var myForm = dockedItems[0];",
                    "",
                    "if( Ext.isDefined( myForm ) )",
                    "{",
                    "    console.log( myForm );",
                    "    //var textBox = myForm.dockedItems.items[0];",
                    "    var textBox = myForm.down('textareafield');",
                    "    textBox.name = fieldname;",
                    "    myForm.loadRecord( selected[0] );",
                    "}",
                    "else",
                    "{",
                    "    console.log( 'loadTabPanelForm(): No form' );",
                    "    //console.log( tabPanel );",
                    "}",
                    "",
                    "var editButton = myForm.items.items[0];",
                    "if( this.userRole === 'ROLE_USER') {",
                    "\teditButton.disable();",
                    "}",
                    "else {",
                    "\teditButton.enable();",
                    "}"
                ]
            },
            "name": "loadTabPanelForm",
            "designerId": "97e4177c-8abb-4174-9e8b-7390beb50c73"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onMyJsonStoreLoad",
                "implHandler": [
                    "//debugger;",
                    "//var g_ = Ext.ComponentQuery.query(\"#monthlysummarygridpanel\")[0];",
                    "var g_ = this.getMonthlyEvaluationGridPanel();",
                    "",
                    "if (g_.getStore().getCount() > 0) {",
                    "    g_.getSelectionModel().deselectAll();",
                    "    g_.getSelectionModel().select( 0 );",
                    "}",
                    "",
                    "this.gridViewReady = true;"
                ]
            },
            "name": "onMyJsonStoreLoad",
            "designerId": "2499bdd3-7f4b-4c96-872a-47bff1dd7922"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationrefreshtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onMonthlyevaluationrefreshtoolClick",
                "implHandler": [
                    "var myStore = Ext.getStore('monthly.EvaluationRatingsStore');",
                    "var myGrid = this.getMonthlyEvaluationGridPanel();",
                    "myGrid.removeAll();",
                    "myStore.reload();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMonthlyevaluationrefreshtoolClick",
            "designerId": "46346b24-df7d-4c9e-8e79-fe2159a62e6a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationsearchtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onMonthlyevaluationsearchtoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMonthlyevaluationsearchtoolClick",
            "designerId": "1c727edc-9a0f-4d37-84ac-b65a8f51054c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationnewtool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onMonthlyevaluationnewtoolClick",
                "implHandler": [
                    "debugger;",
                    "var studentStore\t\t\t\t= Ext.getStore('student.StudentStore');",
                    "//var subjectStore\t\t\t\t= Ext.getStore('subject.SubjectStore');",
                    "//var commonQuarterSubjectStore\t= Ext.getStore( 'common.QuarterSubjectStore');",
                    "//var commonMonthStore\t\t\t= Ext.getStore('common.MonthStore');",
                    "var securityStore\t\t\t\t= Ext.getStore( 'security.SecurityStore');",
                    "var commonMonthStore\t\t\t= Ext.getStore('common.MonthStore');",
                    "var myGrid\t\t\t\t\t\t= this.getMonthlyEvaluationGridPanel();",
                    "var gridModel\t\t\t\t\t= myGrid.getSelectionModel();",
                    "var selectedRecord\t\t\t\t= gridModel.getSelection()[0];",
                    "//var row = myGrid.getStore().indexOf(selectedRecord);",
                    "var securityRecord\t\t\t\t= securityStore.getAt(0);",
                    "this.userName\t\t\t\t\t= securityRecord.get('userName');",
                    "this.userRole\t\t\t\t\t= securityRecord.get('userRole');",
                    "var studentId;",
                    "var studentName;",
                    "",
                    "if( this.userRole === 'ROLE_USER' )",
                    "\treturn;",
                    "",
                    "if( typeof selectedRecord !== 'undefined' )",
                    "{",
                    "\t//var studentRecord\t= studentStore.getAt(0);",
                    "\tstudentId\t\t= selectedRecord.get( 'studentId' );",
                    "\tstudentName\t\t= selectedRecord.get( 'studentUserName' );",
                    "}",
                    "else",
                    "{",
                    "\tif( this.userRole === 'ROLE_USER' )",
                    "\t{",
                    "\t\tvar studentRecord = studentStore.findRecord('userName', this.userName );",
                    "\t\tstudentId = studentRecord.get('studentId');",
                    "\t\tstudentName = this.userName;",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tstudentId = 0;",
                    "\t\tstudentName = \"Select one.\";",
                    "\t}",
                    "}",
                    "",
                    "//var studentRecord\t= studentStore.getAt(0);",
                    "//var studentId\t\t= studentRecord.get( 'id' );",
                    "//var studentName\t\t= studentRecord.get( 'userName' );",
                    "",
                    "var newDialog = Ext.create( 'MySchool.view.monthly.evaluation.NewFormPanel' );",
                    "",
                    "newDialog.down('#studentid').setValue( studentId );",
                    "newDialog.down('#studentname').setValue( studentName );",
                    "if( this.userRole !== 'ROLE_USER')",
                    "{",
                    "\tnewDialog.down('#studentname').setReadOnly( false );",
                    "}",
                    "else",
                    "{",
                    "\tnewDialog.down('#studentname').setReadOnly( true );",
                    "}",
                    "",
                    "//commonQuarterSubjectStore.myLoad();",
                    "commonMonthStore.myLoad();",
                    "",
                    "window.console.log( 'New Monthly Evaluation Dialog' );",
                    "",
                    "newDialog.render( Ext.getBody() );",
                    "newDialog.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMonthlyevaluationnewtoolClick",
            "designerId": "a6b54e4c-eb0a-48f7-83bd-ebe5fa06e9df"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationsavetool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onMonthlyevaluationsavetoolClick",
                "implHandler": [
                    "window.console.log( \"monthly.EvaluationsRatingsStore.Save\" );",
                    "debugger;",
                    "",
                    "",
                    "var mystore = Ext.getStore(\"monthly.EvaluationRatingsStore\");",
                    "if( this.userRole === 'ROLE_USER' )",
                    "{",
                    "\tmystore.reload();",
                    "\treturn;",
                    "}",
                    "",
                    "var records = mystore.getModifiedRecords();",
                    "for( var i = 0; i < records.length; i++ )",
                    "{",
                    "    records[i].set( 'lastUpdated', new Date() );",
                    "    records[i].set( 'whoUpdated', 'login');",
                    "}",
                    "",
                    "mystore.sync();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMonthlyevaluationsavetoolClick",
            "designerId": "94108f56-1424-42b3-a3d3-e7c91ce321a1"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationdeletetool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onMonthlyevaluationdeletetoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMonthlyevaluationdeletetoolClick",
            "designerId": "9ea3fc16-7e4c-4889-bc24-bb966b08e4c3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationlocktool",
                "designer|targetType": "Ext.panel.Tool",
                "fn": "onMonthlyevaluationlocktoolClick",
                "implHandler": [
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onMonthlyevaluationlocktoolClick",
            "designerId": "6f603329-19fa-4b85-89bc-a58a3b6a0b21"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "this.control({",
                    "    \"#editmonthlyevaluationcommentstabpanel\": {",
                    "        click: this.buttonHandler",
                    "    },",
                    "    \"#monthlyevaluationcommentstabpaneltextbox\": {",
                    "        blur: this.blurHandler",
                    "    }",
                    "});"
                ]
            },
            "name": "init",
            "designerId": "29bf401c-f63c-4bcb-83c2-c6b0570867f8"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationgridpanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMonthlyevaluationgridpanelViewReady",
                "implHandler": [
                    "debugger;",
                    "console.log('onMonthlyevaluationsgridpanelViewReady()');",
                    "var myStore = Ext.getStore('monthly.EvaluationRatingsStore');",
                    "var myStudentStore = Ext.getStore('student.StudentStore');",
                    "var securityStore = Ext.getStore('security.SecurityStore');",
                    "var securityRecord = securityStore.getAt(0);",
                    "this.userName = securityRecord.get('userName');",
                    "this.userRole = securityRecord.get('userRole');",
                    "var studentName_;",
                    "var myGrid = this.getMonthlyEvaluationGridPanel();",
                    "",
                    "var studentRecord = myStudentStore.getAt(0);",
                    "//        debugger",
                    "if ( typeof( studentRecord ) != \"undefined\" )",
                    "{",
                    "\tif( this.userName !== 'ROLE_USER')",
                    "\t{",
                    "\t\tstudentName_ = this.userName + '/' + this.userRole;",
                    "\t\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\t\tmyStore.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this",
                    "\t\t});",
                    "\t}",
                    "\telse",
                    "\t{",
                    "\t\tstudentName_ = studentRecord.get('firstName') + \" \" + studentRecord.get('middleName') + ' ' + studentRecord.get('lastName');",
                    "",
                    "\t\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\t\tmyStore.load({",
                    "\t\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\t\tscope: this,",
                    "\t\t\tparams: {",
                    "\t\t\t\tstudentName: studentRecord.get('userName'),",
                    "\t\t\t\tstudentId: studentRecord.get('studentId')",
                    "\t\t\t}",
                    "\t\t});",
                    "\t}",
                    "}",
                    "else",
                    "{",
                    "\tstudentName_ = this.userName + '/' + this.userRole;",
                    "\tmyGrid.setTitle('[' + studentName_ + ']');",
                    "\tmyStore.load({",
                    "\t\tcallback: this.onMyJsonStoreLoad,",
                    "\t\tstudentName: this.userName,",
                    "\t\tscope: this",
                    "\t});\t",
                    "}",
                    "//grid.getSelectionModel().select( 0 );",
                    "//tablepanel.getSelectionModel().select( 0 );"
                ],
                "name": "viewready",
                "scope": "me"
            },
            "name": "onMonthlyevaluationgridpanelViewReady",
            "designerId": "83f2c978-8682-48bf-a204-6b3f5693e45a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#monthlyevaluationgridpanel",
                "designer|targetType": "Ext.grid.Panel",
                "fn": "onMonthlyevaluationgridpanelSelectionChange",
                "implHandler": [
                    "debugger;",
                    "// in the onMyJsonStoreLoad we do a deselect so we need to test",
                    "// if selected[0] has a value",
                    "if ( Ext.isDefined( selected  ) && Ext.isDefined( selected[0]  )) {",
                    "    var tabPanel = this.getMonthlyCommentsTabPanel();",
                    "        console.log( tabPanel );",
                    "    this.loadTabPanelForm( tabPanel, selected, 'comments' );",
                    "    //tabPanel = this.getDailyStudyDetailsTabPanel();",
                    "    //    console.log( tabPanel );",
                    "",
                    "    console.log('onMonthlyevaluationsgridpanelSelectionChange()');",
                    "}"
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onMonthlyevaluationgridpanelSelectionChange",
            "designerId": "de0da20f-430a-4498-9195-4c0749568806"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newmonthlyevaluationcanel",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewmonthlyevaluationcanelClick",
                "implHandler": [
                    "//debugger;",
                    "window.console.log( \"Cancel New Monthly Evaluation\" );",
                    "var myForm = button.up().getForm();",
                    "myForm.reset();",
                    "button.up().hide();"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNewmonthlyevaluationcanelClick",
            "designerId": "f4e4cb87-5f5c-4983-bb03-55a2d9bc8ace"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newmonthlyevaluationsubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "onNewmonthlyevaluationsubmitClick",
                "implHandler": [
                    "debugger;",
                    "window.console.log( \"Submit New Monthly Evaluations\" );",
                    "var myForm\t\t\t\t\t= button.up().getForm();",
                    "//var newDialog = button.up('monthlynewsummaryformpanel');",
                    "",
                    "//Get the values from the form and insert a new record into the MonthlySummaryView.",
                    "",
                    "var formValues\t\t\t\t= myForm.getValues();",
                    "",
                    "//\tCreate an empty record",
                    "var myRecord\t= Ext.create('MySchool.model.monthly.EvaluationRatings');",
                    "",
                    "//\tGet the stores that we will need",
                    "var myStore\t\t= this.getStore( 'monthly.EvaluationRatingsStore' );",
                    "",
                    "//var studentStore = Ext.getStore('student.StudentStore');",
                    "var subjectStore = Ext.getStore( 'subject.SubjectStore' );",
                    "",
                    "//\tGet the student info",
                    "//var studentRecord\t= studentStore.getAt(0);",
                    "//var studentId\t\t= studentRecord.get( 'id' );",
                    "//var studentName\t\t= studentRecord.get( 'userName' );",
                    "",
                    "//\tGet the quarterSubject record from the form.",
                    "var quarterSubjectId\t\t= formValues.comboquartersubject;",
                    "var quarterSubjectRecord;",
                    "for( var i = 0; i < subjectStore.count(); i++ )",
                    "{",
                    "    if( subjectStore.getAt(i).get('id') === quarterSubjectId )",
                    "    {",
                    "        quarterSubjectRecord = subjectStore.getAt(i);",
                    "        break;",
                    "    }",
                    "}",
                    "",
                    "if( typeof quarterSubjectRecord !== 'undefined')",
                    "{",
                    "    //\tGet the other information that we need for the new record.",
                    "    var subjName\t= quarterSubjectRecord.get('subjName');",
                    "    var subjId\t\t= quarterSubjectRecord.get('subjId');",
                    "    var qtrName\t\t= quarterSubjectRecord.get('qtrName');",
                    "    var qtrId\t\t= quarterSubjectRecord.get('qtrId');",
                    "    var qtrYear\t\t= quarterSubjectRecord.get('qtrYear');",
                    "    //var month_number = formValues.combomonth;",
                    "",
                    "    //var allSubjRec_ = myAllSubjStore.findRecord( 'subjName', subjName );",
                    "    //var subjId_ = allSubjRec_.get( 'subjId' );",
                    "",
                    "",
                    "    //Add the data to the new record.",
                    "    if( formValues.combomonth > 0 )",
                    "    {",
                    "        myRecord.set('month_number', formValues.combomonth);",
                    "        //myRecord.set('week_number', formValues.week_number);",
                    "",
                    "        myRecord.set('subjName', subjName );",
                    "        myRecord.set('subjId', subjId );",
                    "        myRecord.set('qtrName', qtrName );",
                    "        myRecord.set('qtrId', qtrId);",
                    "        myRecord.set('studentId', formValues.studentid);",
                    "        myRecord.set('studentUserName', formValues.studentname);",
                    "        myRecord.set('qtrYear', qtrYear);",
                    "",
                    "        myRecord.set('locked', 0 );",
                    "        myRecord.set('levelOfDifficulty', formValues.levelOfDifficulty);",
                    "        myRecord.set('criticalThinkingSkills', formValues.criticalThinkingSkills);",
                    "        myRecord.set('effectiveCorrectionActions', formValues.effectiveCorrectionActions);",
                    "        myRecord.set('completingCourseObjectives', formValues.completingCourseObjectives);",
                    "        myRecord.set('accuratelyIdCorrections', formValues.accuratelyIdCorrections);",
                    "        myRecord.set('thoughtfulnessOfReflections', formValues.thoughtfulnessOfReflections);",
                    "        myRecord.set('workingEffectivelyWithAdvisor', formValues.workingEffectivelyWithAdvisor);",
                    "        myRecord.set('responsibilityOfProgress', formValues.responsibilityOfProgress);",
                    "        myRecord.set('comments', formValues.comments);",
                    "",
                    "        myRecord.set('whoUpdated', 'login');",
                    "        myRecord.set('lastUpdated', new Date());",
                    "        myRecord.set('version', null);",
                    "        myRecord.set('monthlyevaluationId', 0 );",
                    "",
                    "        //add to the store",
                    "",
                    "        myStore.add( myRecord );",
                    "",
                    "        //sync the store.",
                    "        myStore.sync();",
                    "",
                    "        myForm.reset();",
                    "        button.up().hide();",
                    "    }",
                    "    else",
                    "    {",
                    "        var smsg = \"You must enter a value for month\";",
                    "        Ext.MessageBox.show({",
                    "            title: 'REMOTE EXCEPTION',",
                    "            msg: smsg,",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "    }",
                    "}",
                    "else",
                    "{",
                    "    var msg = \"You must have student/faculty/subject/quarter records.\";",
                    "            Ext.MessageBox.show({",
                    "            title: 'NO DATA',",
                    "            msg: smsg,",
                    "            icon: Ext.MessageBox.ERROR,",
                    "            buttons: Ext.Msg.OK",
                    "        });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onNewmonthlyevaluationsubmitClick",
            "designerId": "039891d7-d496-4ed2-a45d-80ce708a2e93"
        }
    ]
}