/*
 * File: app/controller/faculty/OnlyFacultyProfileViewController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.controller.faculty.OnlyFacultyProfileViewController', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'OnlyFacultyForm',
			selector: '#facultyonlyprofileform'
		},
		{
			ref: 'OnlyFacultyGridPanel',
			selector: '#facultyonlygridpanel'
		}
	],

	onFacultyonlygridpanelSelectionChange: function(model, selected, eOpts) {
		debugger;
		// in the onMyJsonStoreLoad we do a deselect so we need to test
		// if selected[0] has a value
		if ( Ext.isDefined( selected  ) && Ext.isDefined( selected[0]  )) {
		    var myForm = this.getOnlyFacultyForm();

		    this.loadForm( myForm, selected );


		    console.log('onFacultyonlygridpanelSelectionChange()');
		}
	},

	onFacultyonlygridpanelViewReady: function(tablepanel, eOpts) {
		debugger;
		console.log('onFacultyprofilerefreshtoolClick()');
		var myStore = Ext.getStore('faculty.FacultyTableStore');

		var securityStore = Ext.getStore('security.SecurityStore');
		var securityRecord = securityStore.getAt(0);
		this.userName = securityRecord.get('userName');
		this.userRole = securityRecord.get('userRole');
		var title;
		var myGrid = this.getOnlyFacultyGridPanel();


		if( this.userRole === 'ROLE_FACULTY'){
			title = this.userName + '/' + this.userRole;


			myGrid.setTitle('[' + title + ']');
			myStore.load({
				callback: this.onMyJsonStoreLoad,
				scope: this,
				params: {
					studentName: this.userName
				}
			});
		}
		else if( this.userRole === 'ROLE_ADMIN'){
			title = this.userName + '/' + this.userRole;


			myGrid.setTitle('[' + title + ']');
			myStore.load({
				callback: this.onMyJsonStoreLoad,
				scope: this
			});
		}
		else{
			var myForm = this.getOnlyFacultyForm();
			//DENIS 12/24/2014
			var editButton = myForm.down('#onlyfacultyprofileformeditbutton');
			if( this.userRole === 'ROLE_USER') {
				editButton.disable();
			}
			else {
				editButton.enable();
			}

		}

	},

	onOnlyfacultyrefreshtoolClick: function(tool, e, eOpts) {
		debugger;
		console.log('onFacultyprofilerefreshtoolClick()');
		var myStore = Ext.getStore('faculty.FacultyTableStore');

		var securityStore = Ext.getStore('security.SecurityStore');
		var securityRecord = securityStore.getAt(0);
		this.userName = securityRecord.get('userName');
		this.userRole = securityRecord.get('userRole');
		var title;
		var myGrid = this.getOnlyFacultyGridPanel();


		if( this.userRole === 'ROLE_FACULTY')
		{
			title = this.userName + '/' + this.userRole;


			myGrid.setTitle('[' + title + ']');
			myStore.load({
				callback: this.onMyJsonStoreLoad,
				scope: this,
				params: {
					studentName: this.userName
				}
			});
		}
		else if( this.userRole === 'ROLE_ADMIN')
		{
			title = this.userName + '/' + this.userRole;


			myGrid.setTitle('[' + title + ']');
			myStore.load({
				callback: this.onMyJsonStoreLoad,
				scope: this
			});
		}

	},

	onOnlyfacultynewtoolClick: function(tool, e, eOpts) {
		debugger;

		var facultyStore = Ext.getStore('faculty.FacultyTableStore');

		if( this.userRole === 'ROLE_ADMIN'){
			var newDialog = Ext.create( 'MySchool.view.faculty.NewDialog' );

			window.console.log( 'New Faculty Dialog' );

			newDialog.render( Ext.getBody() );
			newDialog.show();
		}

	},

	onFacultycancelClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Cancel New Faculty" );
		var myForm = button.up().getForm();
		myForm.reset();
		button.up().hide();
		button.up().up().close();
	},

	onFacultysubmitClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Submit New Faculty" );
		var myForm					= button.up().getForm();
		var myPanel					= button.up();
		var myGrid					= this.getOnlyFacultyGridPanel();

		//Get the values from the form and insert a new record into the StudentStore.

		var formValues				= myForm.getValues();

		//	Create an empty record
		var myRecord	= Ext.create('MySchool.model.faculty.FacultyTableModel');

		//	Get the stores that we will need

		var firstname	= formValues.firstname;
		var middlename	= formValues.middlename;
		var lastname	= formValues.lastname;
		var phone1		= formValues.phone1;
		var phone2		= formValues.phone2;
		var address1	= formValues.address1;
		var address2	= formValues.address2;
		var city		= formValues.city;
		var state		= formValues.state;
		var postalcode	= formValues.postalcode;
		var country		= formValues.country;
		var email		= formValues.email;
		var username	= formValues.username;
		var password	= formValues.password;
		var dob			= formValues.dob;


		var myStore		= this.getStore( 'faculty.FacultyTableStore' );

		//debugger;


		myRecord.set( 'id', null );
		//myRecord.set( 'version', null );

		myRecord.set('whoUpdated', 'login');
		myRecord.set('lastUpdated', new Date());
		myRecord.set('email', email );
		myRecord.set('firstName', firstname );
		myRecord.set('middleName', middlename );
		myRecord.set('lastName', lastname);
		myRecord.set('phone1', phone1 );
		myRecord.set('phone2', phone2 );
		myRecord.set('address1', address1);
		myRecord.set('address2', address2);
		myRecord.set('city', city);
		myRecord.set('province', state);
		myRecord.set('postalCode',postalcode);
		myRecord.set('country',country);
		myRecord.set('userName',username);
		myRecord.set('userPassword',password);
		myRecord.set('enabled', true);
		myRecord.set('dob', dob);

		//add to the store

		myStore.add( myRecord );

		//sync the store.
		myStore.sync();

		myForm.reset();
		button.up().hide();
		button.up().up().close();

	},

	onOnlyfacultyprofileformeditbuttonClick: function(button, e, eOpts) {
		debugger;

		var myForm = this.getOnlyFacultyForm();
		var myFields = myForm.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
			myFields.items[i].enable();
		}
		//myForm.getForm().focus();studentprofileformeditbutton
		var cancelButton	= button.up().down('#onlyfacultyprofileformcanelbutton');
		var saveButton		= button.up().down('#onlyfacultyprofileformsavebutton');
		cancelButton.enable();
		saveButton.enable();
		button.disable();

	},

	onOnlyfacultyprofileformcanelbuttonClick: function(button, e, eOpts) {
		var myForm = this.getOnlyFacultyForm();
		var myFields = myForm.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
			myFields.items[i].disable();
		}
		//myForm.getForm().focus();
		//var cancelButton	= button.up().down('#onlyfacultyprofileformcanelbutton');
		var saveButton		= button.up().down('#onlyfacultyprofileformsavebutton');
		var editButton		= button.up().down('#onlyfacultyprofileformeditbutton');
		editButton.enable();
		saveButton.disable();
		button.disable();

	},

	onOnlyfacultyprofileformsavebuttonClick: function(button, e, eOpts) {
		debugger;
		var myForm = this.getOnlyFacultyForm();
		var myFields = myForm.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
			myFields.items[i].disable();
		}
		//myForm.getForm().focus();
		var cancelButton	= button.up().down('#onlyfacultyprofileformcanelbutton');
		//var saveButton		= button.up().down('#onlyfacultyprofileformsavebutton');
		var editButton		= button.up().down('#onlyfacultyprofileformeditbutton');
		editButton.enable();
		cancelButton.disable();
		button.disable();
		this.saveOnlyFacultyProfileForm();

	},

	onOnlyfacultylpasswordtoolClick: function(tool, e, eOpts) {
		debugger;
		var securityStore				= Ext.getStore('security.SecurityStore');


		var securityRecord	= securityStore.getAt(0);
		this.userName		= securityRecord.get( 'userName' );
		this.userRole		= securityRecord.get( 'userRole' );

		if( this.userRole === "ROLE_ADMIN" || this.userRole === "ROLE_FACULTY" )
		{
			var newDialog = Ext.create( 'MySchool.view.faculty.PasswordDialog' );

			window.console.log( 'Password Dialog' );

			newDialog.render( Ext.getBody() );
			newDialog.show();
		}
	},

	onFacultypasswordcanelbuttonClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Cancel Faculty Password" );
		var myForm = button.up().up().getForm();
		myForm.reset();
		button.up().up().up().hide();
	},

	onFacultypasswordsubmitbuttonClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Submit Faculty Password" );
		var myForm = button.up().up().getForm();

		var myStore = Ext.getStore("faculty.FacultyTableStore");
		var userName = myForm.findField('userName').getSubmitValue();
		var userPassword = myForm.findField('userPassword').getSubmitValue();
		var userRepeatPassword = myForm.findField('userRepeatPassword').getSubmitValue();
		var myRecord = myStore.findRecord('userName', userName );

		if( myRecord === null )
		{
			Ext.MessageBox.show({
				title: 'INVALID USER EXCEPTION',
				msg: 'You have entered an invalid user.',
				icon: Ext.MessageBox.ERROR,
				buttons: Ext.Msg.OK
			});
		}
		if( userPassword == userRepeatPassword && myRecord !== null )
		{
			myRecord.set( 'userPassword', userPassword );
			myStore.sync();
			//myStore.reload();
		}
		myForm.reset();
		button.up().up().up().hide();
	},

	loadForm: function(form, selected) {
		debugger;

		console.log( form );

		form.loadRecord( selected[0] );

		var myFields = form.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ ){
		    myFields.items[i].disable();
		}
		//DENIS 12/24/2014
		var editButton = form.down('#onlyfacultyprofileformeditbutton');
		if( this.userRole === 'ROLE_USER') {
			editButton.disable();
		}
		else {
			editButton.enable();
		}
		console.log('faculty.OnlyFacultyProfileViewController.loadForm(): completed');
	},

	onMyJsonStoreLoad: function() {
		//debugger;
		//var g_ = Ext.ComponentQuery.query("#monthlysummarygridpanel")[0];
		var g_ = this.getOnlyFacultyGridPanel();

		if (g_.getStore().getCount() > 0) {
		    g_.getSelectionModel().deselectAll();
		    g_.getSelectionModel().select( 0 );
		}

		this.gridViewReady = true;
	},

	saveOnlyFacultyProfileForm: function() {
		debugger;
		window.console.log( "Save Faculty Profile Form" );
		//var myForm					= button.up().getForm();
		var myForm = this.getOnlyFacultyForm();


		//	Get the stores that we will need
		var myStore		= this.getStore( 'faculty.FacultyTableStore' );

		//var rForm = myForm.getForm();

		//var formValues1	= myForm.getValues();
		//var formValues	= myForm.getForm().getValues();
		var formFields	= myForm.getForm().getFields();
		//var name	= formFields.items[0].name;
		//var value	= formFields.items[0].lastValue;
		//var test	= this.getFormValue( formFields, 'middleName');
		//debugger;

		//	Create the form record.
		var myRecord	= myForm.getRecord();

		myRecord.set('firstName', this.getFormValue( formFields, 'firstName' ) );
		myRecord.set('middleName', this.getFormValue( formFields, 'middleName' ));
		myRecord.set('lastName', this.getFormValue( formFields, 'lastName' ));
		myRecord.set('phone1', this.getFormValue( formFields, 'phone1' ));
		myRecord.set('phone2', this.getFormValue( formFields, 'phone2' ));
		myRecord.set('address1', this.getFormValue( formFields, 'address1' ));
		myRecord.set('address2', this.getFormValue( formFields, 'address2' ));
		myRecord.set('city', this.getFormValue( formFields, 'city' ));
		myRecord.set('province', this.getFormValue( formFields, 'province' ));
		myRecord.set('postalCode', this.getFormValue( formFields, 'postalCode' ));
		myRecord.set('country', this.getFormValue( formFields, 'country' ));
		myRecord.set('email', this.getFormValue( formFields, 'email' ));
		myRecord.set('dob', this.getFormValue( formFields, 'dob' ));

		myRecord.set('whoUpdated', 'login');
		myRecord.set('lastUpdated', new Date());

		debugger;

		//sync the store.
		myStore.sync();
	},

	getFormValue: function(formFields, name) {
		//var name	= formFields.items[0].name;
		//var value	= formFields.items[0].lastValue;
		for( var i = 0; i < formFields.length; i++ )
		{
		    if( formFields.items[i].name === name )
		    {
		        return formFields.items[i].lastValue;
		    }
		}
		return "";
	},

	init: function(application) {
		this.control({
			"#facultyonlygridpanel": {
				selectionchange: this.onFacultyonlygridpanelSelectionChange,
				viewready: this.onFacultyonlygridpanelViewReady
			},
			"#onlyfacultyrefreshtool": {
				click: this.onOnlyfacultyrefreshtoolClick
			},
			"#onlyfacultynewtool": {
				click: this.onOnlyfacultynewtoolClick
			},
			"#facultycancel": {
				click: this.onFacultycancelClick
			},
			"#facultysubmit": {
				click: this.onFacultysubmitClick
			},
			"#onlyfacultyprofileformeditbutton": {
				click: this.onOnlyfacultyprofileformeditbuttonClick
			},
			"#onlyfacultyprofileformcanelbutton": {
				click: this.onOnlyfacultyprofileformcanelbuttonClick
			},
			"#onlyfacultyprofileformsavebutton": {
				click: this.onOnlyfacultyprofileformsavebuttonClick
			},
			"#onlyfacultylpasswordtool": {
				click: this.onOnlyfacultylpasswordtoolClick
			},
			"#facultypasswordcanelbutton": {
				click: this.onFacultypasswordcanelbuttonClick
			},
			"#facultypasswordsubmitbutton": {
				click: this.onFacultypasswordsubmitbuttonClick
			}
		});
	}

});
