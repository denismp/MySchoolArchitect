/*
 * File: app/controller/student/ProfileViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.controller.student.ProfileViewController', {
	extend: 'Ext.app.Controller',
	alias: 'controller.studentprofileviewcontroller',

	models: [
		'monthly.EvaluationRatings'
	],
	stores: [
		'student.StudentStore',
		'faculty.FacultyTableStore',
		'student.StudentProfileStore'
	],

	refs: [
		{
			ref: 'StudentProfileGridPanel',
			selector: '#studentprofilegridpanel'
		},
		{
			ref: 'StudentProfileForm',
			selector: '#studentprofileform'
		},
		{
			ref: 'studentpasswordtool',
			selector: '#studentpasswordtool'
		},
		{
			ref: 'FacultyComboBox',
			selector: '#facultynamescombobox'
		}
	],

	onStudentprofilegridpanelViewReady: function(tablepanel, eOpts) {
		debugger;
		console.log('onStudentprofilegridpanelViewReady()');
		var myStore = Ext.getStore('student.StudentProfileStore');
		var myStudentStore = Ext.getStore('student.StudentStore');
		var securityStore = Ext.getStore('security.SecurityStore');
		var securityRecord = securityStore.getAt(0);
		var studentRecord = myStudentStore.getAt(0);
		this.userName = securityRecord.get('userName');
		this.userRole = securityRecord.get('userRole');
		var studentName_;
		var myGrid = this.getStudentProfileGridPanel();

		//        debugger
		if ( typeof( studentRecord ) != "undefined" )
		{
			if( this.userRole !== "ROLE_USER")
			{
				studentName_ = this.userName + '/' + this.userRole;

				myGrid.setTitle('[' + studentName_ + ']');
				myStore.load({
					callback: this.onMyJsonStoreLoad,
					scope: this
				});
			}
			else
			{
				studentName_ = studentRecord.get('firstName') + " " + studentRecord.get('middleName') + ' ' + studentRecord.get('lastName');

				myGrid.setTitle('[' + studentName_ + ']');
				myStore.load({
					callback: this.onMyJsonStoreLoad,
					scope: this,
					params: {
						studentName: studentRecord.get('userName' ),
						studentId: studentRecord.get('studentId')
					}
				});
			}
		}
		else
		{
			studentName_ = this.userName + '/' + this.userRole;

			myGrid.setTitle('[' + studentName_ + ']');


			myStore.load({
				callback: this.onMyJsonStoreLoad,
				scope: this,
				params: {
					studentName: this.userName
				}
			});
		}
		//grid.getSelectionModel().select( 0 );
		//tablepanel.getSelectionModel().select( 0 );
		this.selectedIndex = 0;
		myGrid.getSelectionModel().select(0);
	},

	onCheckcolumnCheckChange: function(checkcolumn, rowIndex, checked, eOpts) {
		debugger;
		var myGrid = this.getStudentProfileGridPanel();
		var myStore = this.getStore( 'student.StudentProfileStore');
		var record = myStore.getAt(rowIndex);
		record.set( 'enabled', !checked );
	},

	onStudentprofileformeditbuttonClick: function(button, e, eOpts) {
		debugger;

		var myForm = this.getStudentProfileForm();
		var myFields = myForm.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
		    myFields.items[i].enable();
		}
		//myForm.getForm().focus();studentprofileformeditbutton
		var cancelButton	= button.up().down('#studentprofileformcancelbutton');
		var saveButton		= button.up().down('#studentprofileformsavebutton');
		cancelButton.enable();
		saveButton.enable();
		button.disable();
	},

	onStudentprofileformcancelbuttonClick: function(button, e, eOpts) {
		var myForm = this.getStudentProfileForm();
		var myFields = myForm.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
		    myFields.items[i].disable();
		}
		//myForm.getForm().focus();
		//var cancelButton	= button.up().down('#studentprofileformcancelbutton');
		var saveButton		= button.up().down('#studentprofileformsavebutton');
		var editButton		= button.up().down('#studentprofileformeditbutton');
		editButton.enable();
		saveButton.disable();
		button.disable();
	},

	onStudentprofileformsavebuttonClick: function(button, e, eOpts) {
		var myForm = this.getStudentProfileForm();
		var myFields = myForm.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
		    myFields.items[i].disable();
		}
		//myForm.getForm().focus();
		var cancelButton	= button.up().down('#studentprofileformcancelbutton');
		//var saveButton		= button.up().down('#studentprofileformsavebutton');
		var editButton		= button.up().down('#studentprofileformeditbutton');
		editButton.enable();
		cancelButton.disable();
		button.disable();
		this.saveStudentProfileForm();

	},

	onStudentprofilerefreshtoolClick: function(tool, e, eOpts) {
		var myStore = Ext.getStore('student.StudentProfileStore');
		myStore.reload();
	},

	onStudentprofilesearchtoolClick: function(tool, e, eOpts) {

	},

	onStudentprofilenewtoolClick: function(tool, e, eOpts) {
		debugger;
		var studentStore				= Ext.getStore('student.StudentStore');
		var facultyStore				= Ext.getStore('faculty.FacultyTableStore');

		if( this.userRole !== 'ROLE_USER')
		{
			var newDialog = Ext.create( 'MySchool.view.student.NewDialog' );
			var facultyComboBox = this.getFacultyComboBox();
			if( this.userRole === 'ROLE_FACULTY')
			{
				facultyComboBox.setVisible( false );
				facultyComboBox.forceSelection = false;
			}
			else
			{
				facultyComboBox.setVisible( true );
				facultyComboBox.forceSelection = true;
			}

			window.console.log( 'New Student Dialog' );

			newDialog.render( Ext.getBody() );
			newDialog.show();
		}

	},

	onStudentprofilesavetoolClick: function(tool, e, eOpts) {
		window.console.log( "student.StudentProfileStore.Save" );
		debugger;

		var mystore = Ext.getStore("student.StudentProfileStore");

		var records = mystore.getModifiedRecords();
		for( var i = 0; i < records.length; i++ )
		{
		    records[i].set( 'lastUpdated', new Date() );
		    records[i].set( 'whoUpdated', 'login');
		}

		mystore.sync();
	},

	onStudentprofiledeletetoolClick: function(tool, e, eOpts) {

	},

	onStudentprofilelocktoolClick: function(tool, e, eOpts) {

	},

	onStudentcancelClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Cancel New Student" );
		var myForm = button.up().getForm();
		myForm.reset();
		button.up().hide();
		button.up().up().close();
	},

	onStudentsubmitClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Submit New Student" );
		var myForm					= button.up().getForm();
		var myPanel					= button.up();
		var myGrid					= this.getStudentProfileGridPanel();

		//Get the values from the form and insert a new record into the StudentStore.

		var formValues				= myForm.getValues();

		//	Create an empty record
		var myRecord	= Ext.create('MySchool.model.student.StudentProfileModel');

		//	Get the stores that we will need

		var firstname	= formValues.firstname;
		var middlename	= formValues.middlename;
		var lastname	= formValues.lastname;
		var phone1		= formValues.phone1;
		var phone2		= formValues.phone2;
		var address1	= formValues.address1;
		var address2	= formValues.address2;
		var city		= formValues.city;
		var state		= formValues.state;
		var postalcode	= formValues.postalcode;
		var country		= formValues.country;
		var email		= formValues.email;
		var username	= formValues.username;
		var password	= formValues.password;
		var dob			= formValues.dob;
		var schoolname	= formValues.schoolName;


		var myStore		= this.getStore( 'student.StudentProfileStore' );
		var facultyStore= this.getStore('faculty.FacultyTableStore');
		var facultyComboBox = myPanel.down('#facultynamescombobox');

		//var selectedIndex = myGrid.getSelectionModel().getSelection()[0].index;

		//var myRecord = myStore.getAt(selectedIndex);

		var facultyId;

		if( this.userRole === 'ROLE_FACULTY' )
		{
			var facultyRecord = facultyStore.findRecord( 'userName', this.userName );
			if( facultyRecord !== null )
			{
				facultyId = facultyRecord.get('id');
			}
		}
		else
		{
			facultyId = facultyComboBox.getValue();
		}
		//debugger;

		if( facultyStore.count() > 0 )
		{
		    myRecord.set( 'id', null );
		    //myRecord.set( 'version', null );

		    myRecord.set( 'facultyId', facultyId );

		    myRecord.set('whoUpdated', 'login');
		    myRecord.set('lastUpdated', new Date());
			myRecord.set('email', email );
			myRecord.set('firstName', firstname );
			myRecord.set('middleName', middlename );
			myRecord.set('lastName', lastname);
			myRecord.set('phone1', phone1 );
			myRecord.set('phone2', phone2 );
			myRecord.set('address1', address1);
			myRecord.set('address2', address2);
			myRecord.set('city', city);
			myRecord.set('province', state);
			myRecord.set('postalCode',postalcode);
			myRecord.set('country',country);
			myRecord.set('userName',username);
			myRecord.set('userPassword',password);
			myRecord.set('enabled', true);
			myRecord.set('dob', dob );
			myRecord.set('schoolName', schoolname );

		    //add to the store

		    myStore.add( myRecord );

		    //sync the store.
		    myStore.sync();

		    myForm.reset();
		    button.up().hide();
			button.up().up().close();
		}
		else
		{
		    var msg = "You must have faculty records.";
		            Ext.MessageBox.show({
		            title: 'NO DATA',
		            msg: smsg,
		            icon: Ext.MessageBox.ERROR,
		            buttons: Ext.Msg.OK
		        });
		}
	},

	onStudentpasswordtoolClick: function(tool, e, eOpts) {
		debugger;
		var studentStore				= Ext.getStore('student.StudentStore');
		//var facultyStore				= Ext.getStore('faculty.FacultyTableStore');
		//var subjectStore				= Ext.getStore('subject.SubjectStore');
		//var commonQuarterSubjectStore	= Ext.getStore( 'common.QuarterSubjectStore');
		//var commonMonthStore			= Ext.getStore('common.MonthStore');

		//var studentRecord	= studentStore.getAt(0);
		//var studentId		= studentRecord.get( 'id' );
		//var studentName		= studentRecord.get( 'userName' );
		if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){
			var newDialog = Ext.create( 'MySchool.view.student.PasswordDialog' );

			//newDialog.down('#studentid').setValue( studentId );
			//newDialog.down('#studentname').setValue( studentName );

			//commonQuarterSubjectStore.myLoad();
			//commonMonthStore.myLoad();

			window.console.log( 'Password Dialog' );

			newDialog.render( Ext.getBody() );
			newDialog.show();
		}
	},

	onStudentpasswordcancelbuttonClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Cancel Student Password" );
		var myForm = button.up().up().getForm();
		myForm.reset();
		button.up().up().up().hide();
	},

	onStudentpasswordsubmitbuttonClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Submit Student Password" );
		var myForm = button.up().up().getForm();

		var myStore = Ext.getStore("student.StudentPasswordStore");
		var userName = myForm.findField('userName').getSubmitValue();
		var userPassword = myForm.findField('userPassword').getSubmitValue();
		var userRepeatPassword = myForm.findField('userRepeatPassword').getSubmitValue();
		var myRecord = myStore.findRecord('userName', userName );

		if( myRecord === null )
		{
			Ext.MessageBox.show({
				title: 'INVALID USER EXCEPTION',
				msg: 'You have entered an invalid user.',
				icon: Ext.MessageBox.ERROR,
				buttons: Ext.Msg.OK
			});
		}
		if( userPassword == userRepeatPassword && myRecord !== null )
		{
			myRecord.set( 'userPassword', userPassword );
			myStore.sync();
			//myStore.reload();
		}
		myForm.reset();
		button.up().up().up().hide();

	},

	onStudentprofilestabActivate: function(component, eOpts) {
		debugger;
		//subjectsgrid
		// catch the tab activate but only reload if we have processed
		// the viewready indicated by this.gridViewReady
		console.log('tab.activate()');

		if ( Ext.isDefined( this.gridViewReady  ) ) {
		    //var g_ = Ext.ComponentQuery.query("#subjectsgrid")[0];
			var g_ = this.getStudentProfileGridPanel();

		    g_.getStore().reload();
		}

	},

	onStudentprofilesassociatetoolClick: function(tool, e, eOpts) {
		debugger;

		//var guardianStore = Ext.getStore('guardian.GuardianProfileStore');
		//var guardianTypesStore = Ext.getStore('guardian.GuardianTypeStore');
		//guardianTypesStore.myLoad();

		if( this.userRole === 'ROLE_ADMIN' || this.userRole === 'ROLE_SCHOOL'){
			var newDialog = Ext.create( 'MySchool.view.student.AddChildDialog' );

			window.console.log( 'Add School To Student Dialog' );

			newDialog.render( Ext.getBody() );
			newDialog.show();
		}

	},

	onStudentaddchildcancelClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Cancel Add School To Student" );
		var myForm = button.up().getForm();
		myForm.reset();
		button.up().hide();
		button.up().up().close();
	},

	onStudentaddchildsubmitClick: function(button, e, eOpts) {
		debugger;
		window.console.log( "Submit Add School To Student" );
		var myForm					= button.up().getForm();
		var myPanel					= button.up();
		var myGrid					= this.getStudentProfileGridPanel();

		//Get the values from the form and insert a new record into the StudentProfileStore.

		var formValues				= myForm.getValues();

		//	Get the selected record.
		var myRecord = myGrid.getSelectionModel().getLastSelected();
		//var myRecord	= myGrid.getSelectionModel().getSelection()[0];
		//var myRecord	= Ext.create('MySchool.model.student.StudentProfileModel');

		//	Get the stores that we will need

		var schoolname	= formValues.schoolname;

		var myStore		= this.getStore( 'student.StudentProfileStore' );

		//debugger;

		myRecord.set( 'schoolName', schoolname );
		myRecord.set( 'id', null );

		//add to the store.  For a normal update, only the sync() is called.
		//In this case we are expecting the create method on the backend to
		//perform an update instead of a create.  This will allow updated from
		//the grid to work as expected while allowing us to add a new student
		//child to the existing guardian relation.  This will actually create
		//another record in the guardian table with the new studentId.
		//The backend checks to see if the studentId in this records is
		//different from the one with the specified schoolName.  If so,
		//then the new record will be created.
		myStore.add( myRecord );

		//sync the store.
		myStore.sync();

		myForm.reset();
		button.up().hide();
		button.up().up().close();

	},

	onStudentprofilegridpanelSelect: function(rowmodel, record, index, eOpts) {
		debugger;

		var myForm = this.getStudentProfileForm();
		this.loadForm( myForm, record );
		rowmodel.deselect( this.selectedIndex, true );
		this.selectedIndex = index;
		rowmodel.select( index, false, true );
	},

	buttonHandler: function(button, e, eOpts) {
		debugger;
		window.console.log(button);
		var b_		= button;
		var form	= b_.up('panel');
		var p_		= form.up();
		var pItemId_ = p_.getItemId();
		var field_;

		if (pItemId_ == 'dailyhourstab') {
		    field_ = p_.down('numberfield');
		} else {
		    field_ = p_.down('textareafield');
		}

		if (b_.getText().charAt(0) == 'D') {
		    b_ = p_.down('#edit' + pItemId_);
		    b_.setText('Edit');
		    b_.setDisabled(false);
		    field_.setDisabled(true);
		} else {
		    b_.setText('Done');
		    field_.setDisabled(false);
		    field_.focus();
		}
	},

	blurHandler: function(o, event, eOpts) {
		debugger;
		var p_			= o.up('form').up('panel');
		//var myForm		= o.up('form');
		var myForm		= this.getFacultyByStudentForm();
		//var topP_		= p_.up('panel');
		var pItemId_	= p_.getItemId();
		var edit_		= p_.down('#edit' + pItemId_);
		var myTitle		= p_.title;
		console.log( edit_ );
		//console.log( topP_ );
		console.log( myForm );
		console.log( "pItemId_=" + pItemId_);
		//var myController = this;

		console.log( 'title=' + myTitle );

		//topP_.buttonHandler(edit_);

		Ext.Msg.show({
		    title:'Save Changes?',
		    //msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',
		    msg: 'Would you like to save your changes to ' + myTitle + ' ?',
		    buttons: Ext.Msg.YESNO,
		    icon: Ext.Msg.QUESTION,
		    fn: function(buttonId) {
		        var mystore		= Ext.getStore("faculty.ByStudentStore");
		        if (buttonId == 'yes') {
		            Ext.Msg.show({
		                title: 'Save',
		                msg: 'record saved',
		                buttons: Ext.Msg.OK,
		                icon: Ext.window.MessageBox.INFO
		            });
		            //debugger;

		            var myTextArea	= myForm.down('textareafield');
		            var myName		= myTextArea.getName();
		            var myValue		= myTextArea.getValue();
		            var record		= myForm.getRecord();
		            record.set( myName, myValue );
		            record.set( 'lastUpdated', new Date() );
		            record.set( 'whoUpdated', 'login' );

		            mystore.sync();
		        }
		        else {
		            Ext.Msg.show({
		                title: 'Cancel',
		                msg: 'record restored',
		                buttons: Ext.Msg.OK,
		                icon: Ext.window.MessageBox.INFO
		            });
		            mystore.reload();
		        }

		    }
		});
		//debugger;
		this.buttonHandler( edit_ );
	},

	loadForm: function(form, record) {
		debugger;

		console.log( form );
		//var textBox = myForm.dockedItems.items[0];
		//var textBox = myForm.down('textareafield');
		//textBox.name = fieldname;
		form.loadRecord( record );
		var rform = form.getForm();
		var myFields = form.getForm().getFields();
		for( var i = 0; i < myFields.length; i++ )
		{
		    myFields.items[i].disable();
		}
		console.log('student.StudentProfileStore.loadForm(): completed');
	},

	onMyJsonStoreLoad: function() {
		debugger;
		//var g_ = Ext.ComponentQuery.query("#monthlysummarygridpanel")[0];
		var g_ = this.getStudentProfileGridPanel();

		if (g_.getStore().getCount() > 0) {
		    g_.getSelectionModel().deselectAll();
		    g_.getSelectionModel().select( 0 );
		}

		this.gridViewReady = true;
	},

	saveStudentProfileForm: function() {
		debugger;
		window.console.log( "Save Student Profile Form" );
		//var myForm					= button.up().getForm();
		var myForm = this.getStudentProfileForm();


		//	Get the stores that we will need
		var myStore		= this.getStore( 'student.StudentProfileStore' );

		//var rForm = myForm.getForm();

		//var formValues1	= myForm.getValues();
		//var formValues	= myForm.getForm().getValues();
		var formFields	= myForm.getForm().getFields();
		//var name	= formFields.items[0].name;
		//var value	= formFields.items[0].lastValue;
		//var test	= this.getFormValue( formFields, 'middleName');
		//debugger;

		//	Create the form record.
		var myRecord	= myForm.getRecord();

		myRecord.set('firstName', this.getFormValue( formFields, 'firstName' ) );
		myRecord.set('middleName', this.getFormValue( formFields, 'middleName' ));
		myRecord.set('lastName', this.getFormValue( formFields, 'lastName' ));
		myRecord.set('phone1', this.getFormValue( formFields, 'phone1' ));
		myRecord.set('phone2', this.getFormValue( formFields, 'phone2' ));
		myRecord.set('address1', this.getFormValue( formFields, 'address1' ));
		myRecord.set('address2', this.getFormValue( formFields, 'address2' ));
		myRecord.set('city', this.getFormValue( formFields, 'city' ));
		myRecord.set('province', this.getFormValue( formFields, 'province' ));
		myRecord.set('postalCode', this.getFormValue( formFields, 'postalCode' ));
		myRecord.set('country', this.getFormValue( formFields, 'country' ));
		myRecord.set('email', this.getFormValue( formFields, 'email' ));
		myRecord.set('dob', this.getFormValue( formFields, 'dob' ));

		myRecord.set('whoUpdated', 'login');
		myRecord.set('lastUpdated', new Date());

		debugger;

		//sync the store.
		myStore.sync();
	},

	getFormValue: function(formFields, name) {
		//var name	= formFields.items[0].name;
		//var value	= formFields.items[0].lastValue;
		for( var i = 0; i < formFields.length; i++ )
		{
		    if( formFields.items[i].name === name )
		    {
		        return formFields.items[i].lastValue;
		    }
		}
		return "";
	},

	onLaunch: function() {
		//var facultyStore = Ext.getStore( 'faculty.FacultyTableStore' );
		//var studentProfileStore = Ext.getStore('student.StudentProfileStore');
		//var myStudentStore = Ext.getStore('student.StudentStore');
		//var securityStore = Ext.getStore('security.SecurityStore');

		//debugger;
		//facultyStore.load({
		//	callback: this.onFacultyStoreLoad,
		//	scope: this
		//	}
		//);

		//studentProfileStore.load();
		//myStudentStore.load();
		//securityStore.load();

	},

	onFacultyStoreLoad: function() {

	},

	init: function(application) {
				Ext.getStore('student.StudentProfileStore').addListener('datachanged', this.onGridDataChanged, this );

		this.control({
			"#studentprofilegridpanel": {
				viewready: this.onStudentprofilegridpanelViewReady,
				select: this.onStudentprofilegridpanelSelect
			},
			"#studentprofilegridenabledcolumn": {
				checkchange: this.onCheckcolumnCheckChange
			},
			"#studentprofileformeditbutton": {
				click: this.onStudentprofileformeditbuttonClick
			},
			"#studentprofileformcancelbutton": {
				click: this.onStudentprofileformcancelbuttonClick
			},
			"#studentprofileformsavebutton": {
				click: this.onStudentprofileformsavebuttonClick
			},
			"#studentprofilerefreshtool": {
				click: this.onStudentprofilerefreshtoolClick
			},
			"#studentprofilesearchtool": {
				click: this.onStudentprofilesearchtoolClick
			},
			"#studentprofilenewtool": {
				click: this.onStudentprofilenewtoolClick
			},
			"#studentprofilesavetool": {
				click: this.onStudentprofilesavetoolClick
			},
			"#studentprofiledeletetool": {
				click: this.onStudentprofiledeletetoolClick
			},
			"#studentprofilelocktool": {
				click: this.onStudentprofilelocktoolClick
			},
			"#studentcancel": {
				click: this.onStudentcancelClick
			},
			"#studentsubmit": {
				click: this.onStudentsubmitClick
			},
			"#studentpasswordtool": {
				click: this.onStudentpasswordtoolClick
			},
			"#studentpasswordcancelbutton": {
				click: this.onStudentpasswordcancelbuttonClick
			},
			"#studentpasswordsubmitbutton": {
				click: this.onStudentpasswordsubmitbuttonClick
			},
			"#studentprofilestab": {
				activate: this.onStudentprofilestabActivate
			},
			"#studentprofilesassociatetool": {
				click: this.onStudentprofilesassociatetoolClick
			},
			"#studentaddchildcancel": {
				click: this.onStudentaddchildcancelClick
			},
			"#studentaddchildsubmit": {
				click: this.onStudentaddchildsubmitClick
			}
		});
	},

	onGridDataChanged: function() {
		debugger;
		var myGrid = this.getStudentProfileGridPanel();
		var myModel = myGrid.getSelectionModel();
		myModel.deselectAll();
		this.selectedIndex = 0;
		myModel.select(0, false, true);
		var mySelected = myModel.getLastSelected();
		myModel.fireEvent( 'selectionchange', this, mySelected );
	}

});
